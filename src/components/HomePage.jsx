import { Component, createElement } from "react";
import "../ui/FingerPrintWeb.css";
import axios from "axios";
import { Form } from 'react-advanced-form';
import { FingerPrintScaning } from '../components/FingerPrintScaning';
import { LoadingSpinner } from '../components/LoadingSpinner.js'

export class HomePage extends Component {

    constructor(props) {
        debugger;
        super(props);
        this.state = {

            ApiSendFingerToSegmntationEndPoint2: "http://localhost:12345/api/AFISHome/SigmentationThumbs",
            ApiSendFingerToSegmntation: "http://localhost:12345/api/AFISHome/FingerPrintSegemntation",

            IndexRight: true,
            MiddleRight: true,
            RingRight: true,
            LittleRight: true,

            IndexLeft: true,
            MiddleLeft: true,
            RingLeft: true,
            LittleLeft: true,

            ThumbLeft: true,
            ThumbRight: true,

            /* Demo IBSU  */
            connectedDeviceCount: 0,
            scannerDevice: undefined,
            beeperType: undefined,
            captureInProgress: false,
            captureInfo: new Object(),  // Actions during fingerprint scan
            deviceDesc: [],             // Array of device descriptions
            isBlank: false,
            clearPlatenWarning: false,
            scanDeviceWidth: undefined,
            scanDeviceHeight: undefined,
            viewWidth: 320,  // Physical size of HTML image view
            viewHeight: 300,
            previewWidth: 400,  // Image size as generated by SDK during preview - This will change with scanner type
            previewHeight: 375,
            okBeepSound: undefined,
            successBeepSound: undefined,
            deviceLocked: false,
            appendedText: "",
            dropdownFillFunctions: [],
            strSpoofStatus: "",
            TypeId: 0,
            AFIS_FAFM_Right: { position: "RightHand", image: { dataBytes: "", format: "bmp" }, fingerprints: [], missingFingerprints: [] },
            AFIS_FAFM_Left: { position: "LeftHand", image: { dataBytes: "", format: "bmp" }, fingerprints: [], missingFingerprints: [] },
            AFIS_FAFM_Thumbs: { position: "Thumbs", image: { dataBytes: "", format: "bmp" }, fingerprints: [], missingFingerprints: [] },
            AFIS_FingerApllicationFingerModulty: { enrollAction: { enrollActionType: "None" }, fingerprintModality: { fingerprints: [], missingFingerprints: [] } },
            AFIS_VerfiyFingerPrint: { parameters: { maxRotation: 180, threshold: 75 }, references: [{ fingerprints: [] }] },
            SigPicTrue: false,
            FingerPrintExistThumb: false,
            FingerPrintExistRight: false,
            FingerPrintExistLeft: false,
            UrlCheackServiceRuning: "http://localhost:12345/api/AFISHome/CheackSerivceRuning",
            NochangeFromhandling: true,
            BlocedButtonCLose: false,
            BlockedButtonsave: false,
            BlockedButtonUpdate: false,
            BlockedbUttonVerfiy: false,
            IsLoading: false

        }
        this.ShowDeviceInfo = this.ShowDeviceInfo.bind(this);
        // this.CaptureLeftHand = this.CaptureLeftHand.bind(this);
        // this.CaptureRightHand = this.CaptureRightHand.bind(this);
        // this.CaptureThumbsHand = this.CaptureThumbsHand.bind(this);


    }

    componentWillUnmount() {
        this.Stop();
    }

    componentDidMount() {


        document.getElementById("FPScanner").style.display = 'block'
        document.getElementById("IV01").style.display = 'none'

        const script1 = document.createElement("script");

        script1.src = "http://localhost:5020/IBScanUltimate.min.js";
        script1.async = false;
        document.body.appendChild(script1);


        axios.post(this.state.UrlCheackServiceRuning, this.state.AFIS_FAFM_Right)
            .then(response => {
                this.setState({


                    ApiSendFingerToSegmntationEndPoint2: "http://localhost:12345/api/AFISHome/SigmentationThumbs",
                    ApiSendFingerToSegmntation: "http://localhost:12345/api/AFISHome/FingerPrintSegemntation",

                    IndexRight: true,
                    MiddleRight: true,
                    RingRight: true,
                    LittleRight: true,

                    IndexLeft: true,
                    MiddleLeft: true,
                    RingLeft: true,
                    LittleLeft: true,

                    ThumbLeft: true,
                    ThumbRight: true,

                    /* Demo IBSU  */
                    connectedDeviceCount: 0,
                    scannerDevice: undefined,
                    beeperType: undefined,
                    captureInProgress: false,
                    captureInfo: new Object(),  // Actions during fingerprint scan
                    deviceDesc: [],             // Array of device descriptions
                    isBlank: false,
                    clearPlatenWarning: false,
                    scanDeviceWidth: undefined,
                    scanDeviceHeight: undefined,
                    viewWidth: 320,  // Physical size of HTML image view
                    viewHeight: 300,
                    previewWidth: 400,  // Image size as generated by SDK during preview - This will change with scanner type
                    previewHeight: 375,
                    okBeepSound: undefined,
                    successBeepSound: undefined,
                    deviceLocked: false,
                    appendedText: "",
                    dropdownFillFunctions: [],
                    strSpoofStatus: "",
                    TypeId: 0,
                    AFIS_FAFM_Right: { position: "RightHand", image: { dataBytes: "", format: "bmp" }, fingerprints: [], missingFingerprints: [] },
                    AFIS_FAFM_Left: { position: "LeftHand", image: { dataBytes: "", format: "bmp" }, fingerprints: [], missingFingerprints: [] },
                    AFIS_FAFM_Thumbs: { position: "Thumbs", image: { dataBytes: "", format: "bmp" }, fingerprints: [], missingFingerprints: [] },
                    AFIS_FingerApllicationFingerModulty: { enrollAction: { enrollActionType: "None" }, fingerprintModality: { fingerprints: [], missingFingerprints: [] } },
                    AFIS_VerfiyFingerPrint: { parameters: { maxRotation: 180, threshold: 75 }, references: [{ fingerprints: [] }] },
                    SigPicTrue: false,
                    FingerPrintExistThumb: false,
                    FingerPrintExistRight: false,
                    FingerPrintExistLeft: false,
                    UrlCheackServiceRuning: "http://localhost:12345/api/AFISHome/CheackSerivceRuning",

                })

            }).catch(error => {
                if (confirm("قد يكون الجهاز غير متوفر او الخدمة متوقفة أو أنه لم يتم تثبيتها . هل تود تحميل تعريف الإصدار الأحدث من الخدمة؟")) {
                    window.open("./WindowsServices/FingerPrintWindowsSetup.msi", "_base");
                }
            }
            )



        setTimeout(() => {
            this.InitPage();
        }, 1000);

        setTimeout(() => {

            IBSU.onPreviewImage = (deviceHandle, imageData, rollingInformation) => {

                var imageElement = document.getElementById("idFpImage");
                imageElement.setAttribute('src', "data:image/png;base64," + imageData.StrImagePngBase64);

                // Notes: Scan image dimensions can vary based on captureType
                //   - For preview, bitmap is always scaled to the view dimensions, but original attributes are still passed in 'imageData' object
                this.setState({
                    scanDeviceWidth: imageData.Width,
                    scanDeviceHeight: imageData.Height
                })
                // this.state.scanDeviceWidth = imageData.Width;
                // this.state.scanDeviceHeight = imageData.Height;

                if (this.state.captureInfo.ImageType == IBSU_ImageType.ENUM_IBSU_ROLL_SINGLE_FINGER)
                    this.DrawRollingLine(rollingInformation);

            }
        }, 2000);

        setTimeout(() => {
            this.ClearPlatenCheckTimer();
        }, 500);




    }

    CaptureRightHand() {

        this.setState({
            AFIS_FAFM_Right: { position: "RightHand", image: { dataBytes: "", format: "bmp" }, fingerprints: [], missingFingerprints: [] },
            TypeId: 0,
        }, () => {

            document.getElementById("FPScanner").style.display = 'none'
            document.getElementById("IV01").style.display = 'block'

            //Fonded Finger
            if (this.state.IndexRight) {
                this.state.AFIS_FAFM_Right.fingerprints.push({ position: "RightIndex", image: { dataBytes: "", format: "" } });
            } if (this.state.MiddleRight) {
                this.state.AFIS_FAFM_Right.fingerprints.push({ position: "RightMiddle", image: { dataBytes: "", format: "" } });
            } if (this.state.RingRight) {
                this.state.AFIS_FAFM_Right.fingerprints.push({ position: "RightRing", image: { dataBytes: "", format: "" } });
            } if (this.state.LittleRight) {
                this.state.AFIS_FAFM_Right.fingerprints.push({ position: "RightLittle", image: { dataBytes: "", format: "" } });

            }

            //Missing Finger

            if (!this.state.IndexRight) {
                this.state.AFIS_FAFM_Right.missingFingerprints.push({ missingReasonCode: "", missingReasonText: "cut", position: "RightIndex" });
            } if (!this.state.MiddleRight) {
                this.state.AFIS_FAFM_Right.missingFingerprints.push({ missingReasonCode: "", missingReasonText: "cut", position: "RightMiddle" });
            } if (!this.state.RingRight) {
                this.state.AFIS_FAFM_Right.missingFingerprints.push({ missingReasonCode: "", missingReasonText: "cut", position: "RightRing" });
            } if (!this.state.LittleRight) {
                this.state.AFIS_FAFM_Right.missingFingerprints.push({ missingReasonCode: "", missingReasonText: "cut", position: "RightLittle" });
            }


            if (this.state.AFIS_FAFM_Right.fingerprints.length == 1) {
                this.setState({
                    TypeId: 5
                }, () => {
                    this.SetStartStopButtons();
                })
            } else {
                this.setState({
                    TypeId: 1
                }, () => {
                    this.SetStartStopButtons();

                })
            }

        })



    }

    CaptureLeftHand() {

        this.setState({
            AFIS_FAFM_Left: { position: "LeftHand", image: { dataBytes: "", format: "bmp" }, fingerprints: [], missingFingerprints: [] },
            TypeId: 0
        }, () => {
            document.getElementById("FPScanner").style.display = 'none'
            document.getElementById("IV01").style.display = 'block'
            if (this.state.LittleLeft) {
                this.state.AFIS_FAFM_Left.fingerprints.push({ position: "LeftLittle", image: { dataBytes: "", format: "" } });

            } if (this.state.RingLeft) {
                this.state.AFIS_FAFM_Left.fingerprints.push({ position: "LeftRing", image: { dataBytes: "", format: "" } });

            } if (this.state.MiddleLeft) {
                this.state.AFIS_FAFM_Left.fingerprints.push({ position: "LeftMiddle", image: { dataBytes: "", format: "" } });

            } if (this.state.IndexLeft) {
                this.state.AFIS_FAFM_Left.fingerprints.push({ position: "LeftIndex", image: { dataBytes: "", format: "" } });
            }

            //Missing Finger

            if (!this.state.LittleLeft) {
                this.state.AFIS_FAFM_Left.missingFingerprints.push({ missingReasonCode: "", missingReasonText: "cut", position: "LeftLittle" });
            } if (!this.state.RingLeft) {
                this.state.AFIS_FAFM_Left.missingFingerprints.push({ missingReasonCode: "", missingReasonText: "cut", position: "LeftRing" });
            } if (!this.state.MiddleLeft) {
                this.state.AFIS_FAFM_Left.missingFingerprints.push({ missingReasonCode: "", missingReasonText: "cut", position: "LeftMiddle" });
            } if (!this.state.IndexLeft) {
                this.state.AFIS_FAFM_Left.missingFingerprints.push({ missingReasonCode: "", missingReasonText: "cut", position: "LeftIndex" });
            }

            if (this.state.AFIS_FAFM_Left.fingerprints.length == 1) {
                this.setState({
                    TypeId: 6
                }, () => {
                    this.SetStartStopButtons();
                })
            } else {
                this.setState({
                    TypeId: 2
                }, () => {
                    this.SetStartStopButtons();
                })
            }
        })



    }

    CaptureThumbsHand() {

        this.setState({
            AFIS_FAFM_Thumbs: { position: "Thumbs", image: { dataBytes: "", format: "bmp" }, fingerprints: [], missingFingerprints: [], TypeId: 0 }
        }, () => {
            document.getElementById("FPScanner").style.display = 'none'
            document.getElementById("IV01").style.display = 'block'
            if (this.state.ThumbRight) {
                this.state.AFIS_FAFM_Thumbs.fingerprints.push({ position: "RightThumb", image: { dataBytes: "", format: "" } });

            } if (this.state.ThumbLeft) {
                this.state.AFIS_FAFM_Thumbs.fingerprints.push({ position: "LeftThumb", image: { dataBytes: "", format: "" } });

            }

            if (!this.state.ThumbRight) {
                this.state.AFIS_FAFM_Thumbs.missingFingerprints.push({ missingReasonCode: "", missingReasonText: "cut", position: "RightThumb" });

            } if (!this.state.ThumbLeft) {
                this.state.AFIS_FAFM_Thumbs.missingFingerprints.push({ missingReasonCode: "", missingReasonText: "cut", position: "LeftThumb" });

            }

            this.setState({
                TypeId: 3
            }, () => {
                this.SetStartStopButtons();
            })

        })

    }



    resizeBase64Img(base64, width, height) {

        // Create and initialize two canvas
        var canvas = document.createElement("canvas");
        var ctx = canvas.getContext("2d");
        var canvasCopy = document.createElement("canvas");
        var copyContext = canvasCopy.getContext("2d");

        // Create original image
        var img = new Image();
        img.src = "data:image/bmp;base64," + base64;

        // Determine new ratio based on max size
        var ratio = 1;
        if (img.width > width)
            ratio = width / img.width;
        else if (img.height > height)
            ratio = height / img.height;

        // Draw original image in second canvas
        canvasCopy.width = img.width;
        canvasCopy.height = img.height;
        copyContext.drawImage(img, 0, 0);

        // Copy and resize second canvas to first canvas
        canvas.width = img.width * ratio;
        canvas.height = img.height * ratio;
        ctx.drawImage(canvasCopy, 0, 0, canvasCopy.width, canvasCopy.height, 0, 0, canvas.width, canvas.height);

        return canvas.toDataURL();
    }

    SaveFingerPrint() {

        debugger;

        if (this.state.AFIS_FingerApllicationFingerModulty.fingerprintModality.fingerprints.length > 0) {
            if (this.state.IndexRight || this.state.MiddleRight || this.state.RingRight || this.state.LittleRight) {
                if (this.state.AFIS_FAFM_Right.fingerprints.length == 0) {
                    alert("الرجاء اخذ بصمة اليد اليمنى");
                    return;
                }
            }
            if (this.state.IndexLeft || this.state.MiddleLeft || this.state.RingLeft || this.state.LittleLeft) {
                if (this.state.AFIS_FAFM_Left.fingerprints.length == 0) {
                    alert("الرجاء اخذ بصمة اليد اليسرى");
                    return;
                }

            }
            if (this.state.ThumbLeft || this.state.ThumbRight) {
                if (this.state.AFIS_FAFM_Thumbs.fingerprints.length == 0) {
                    alert("الرجاء اخذ بصمات الابهام");
                    return;
                }
            }


            document.getElementById("BtnSaveFinger").disabled = true;

            if (this.props.props.onClickActionSave && this.props.props.onClickActionSave.canExecute) {
                this.setState({
                    BlockedButtonsave: true, IsLoading: true
                }, () => {
                    this.props.props.onClickActionSave.execute();

                    setInterval(() => {
                        if (this.props.props.data)
                            this.props.props.data.items.map((items ) => {
                              if(items[Object.getOwnPropertySymbols(items)[0]].jsonData.attributes.IsMatchpic.value)
                              {
                                this.setState({
                                    BlockedButtonsave: false, IsLoading: false
                                })
                              }
                            })
                        

                    }, 1)



                })
            }
        } else {
            alert("يرجى اخذ البصمات اولا");
            return;
        }

        ///this Phase You need create object from Side Mendix  to save On Server inoovatrics  .

    }

    UpdateFingerPrint() {


        if (this.state.AFIS_FingerApllicationFingerModulty.fingerprintModality.fingerprints.length > 0) {
            if (this.state.IndexRight || this.state.MiddleRight || this.state.RingRight || this.state.LittleRight) {
                if (this.state.AFIS_FAFM_Right.fingerprints.length == 0) {
                    alert("الرجاء اخذ بصمة اليد اليمنى");
                    return;
                }
            }
            if (this.state.IndexLeft || this.state.MiddleLeft || this.state.RingLeft || this.state.LittleLeft) {
                if (this.state.AFIS_FAFM_Left.fingerprints.length == 0) {
                    alert("الرجاء اخذ بصمة اليد اليسرى");
                    return;
                }

            }
            if (this.state.ThumbLeft || this.state.ThumbRight) {
                if (this.state.AFIS_FAFM_Thumbs.fingerprints.length == 0) {
                    alert("الرجاء اخذ بصمات الابهام");
                    return;
                }
            }

            if (this.props.props.onClickActionUpdate && this.props.props.onClickActionUpdate.canExecute) {

                this.setState({
                    BlockedButtonUpdate: true
                }, () => {
                    this.props.props.onClickActionUpdate.execute();
                })

            }
        } else {
            alert("يرجى اخذ البصمات اولا");
            return;
        }

        ///this Phase You need create object from Side Mendix  to save On Server inoovatrics  .

    }

    DeleteFingerPrint() {

        if (this.props.props.onClickActionDelete && this.props.props.onClickActionDelete.canExecute) {

            this.props.props.onClickActionDelete.execute();
        }

    }

    closePage() {

        if (this.props.props.onClickActionClosePage && this.props.props.onClickActionClosePage.canExecute) {

            this.setState({
                BlocedButtonCLose: true
            }, () => {
                this.props.props.onClickActionClosePage.execute();
            })

        }


    }

    ButtonVerfiyDeliverCapture() {

        this.state.AFIS_VerfiyFingerPrint.references[0].fingerprints = [];


        if (this.state.AFIS_FingerApllicationFingerModulty.fingerprintModality.fingerprints.length > 0) {
            if (this.state.IndexRight || this.state.MiddleRight || this.state.RingRight || this.state.LittleRight) {
                if (this.state.AFIS_FAFM_Right.fingerprints.length == 0) {
                    alert("الرجاء اخذ بصمة اليد اليمنى");
                    return;
                }
            }
            if (this.state.IndexLeft || this.state.MiddleLeft || this.state.RingLeft || this.state.LittleLeft) {
                if (this.state.AFIS_FAFM_Left.fingerprints.length == 0) {
                    alert("الرجاء اخذ بصمة اليد اليسرى");
                    return;
                }

            }
            if (this.state.ThumbLeft || this.state.ThumbRight) {
                if (this.state.AFIS_FAFM_Thumbs.fingerprints.length == 0) {
                    alert("الرجاء اخذ بصمات الابهام");
                    return;
                }
            }



            if (this.props.props.onClickActionVerify && this.props.props.onClickActionVerify.canExecute) {

                this.setState({
                    BlockedbUttonVerfiy: true
                }, () => {
                    this.props.props.onClickActionVerify.execute();
                })

            }

            ///this code in the below Must moved on Mendix Side to Verfiy in Server inoovatrics .


            // for (var x = 0; x < this.state.AFIS_FingerApllicationFingerModulty.fingerprintModality.fingerprints.length; x++) {
            //     debugger;
            //     this.state.AFIS_VerfiyFingerPrint.references[0].fingerprints = this.state.AFIS_VerfiyFingerPrint.references[0].fingerprints.concat({
            //         dataBytes: this.state.AFIS_FingerApllicationFingerModulty.fingerprintModality.fingerprints[x].image.dataBytes,
            //         format: "png",
            //         position: "UnknownFinger"
            //     })
            // }



            // var data2 = JSON.stringify(this.state.AFIS_VerfiyFingerPrint);

            // var config = {
            //     method: 'post',
            //     url: `http://10.130.149.112/abis/v2/applicants/${this.props.IDNumber.value}/verify/images?fullResponse=true`,
            //     headers: {

            //         'Content-Type': 'application/json',
            //         'Accept': '*/*'
            //     },
            //     data: data2
            // };


            // axios(config)
            //     .then(function (response) {
            //         if (response.data.length > 0) {
            //             alert("البصماات متطابقة");
            //         } else {
            //             alert("البصماات غير متطابقة");
            //         }

            //     })
            //     .catch(function (error) {
            //         debugger;
            //         console.log(error);
            //         alert("حصل خطأ عند التحقق تأكد من الوصول الى الخدمة Innovatrics ");
            //     });




        } else {
            alert("يرجى اخذ البصمات اولا");
            return;
        }


    }

    clearCacheData() {
        caches.keys().then((names) => {
            names.forEach((name) => {
                caches.delete(name);
            });
        });
        alert('Complete Cache Cleared')
    };


    componentDidUpdate() { 

        if (this.state.NochangeFromhandling) {
            if (this.props.props.IsVerify.value == 'true') {
                if (this.props.props.AgePerson.value >= 12) {
                    document.getElementById("sPersonFingerPrint").value = "1";
                    document.getElementById("sPersonFingerPrint").disabled = true;
                    this.props.props.ApplicantHimSelf.setValue(true);

                } else {

                    document.getElementById("sPersonFingerPrint").value = "2";
                    document.getElementById("sPersonFingerPrint").disabled = true;
                    this.props.props.ApplicantHimSelf.setValue(false);

                }


            } else {

                if (this.props.props.AgePerson.value >= 18) {
                    document.getElementById("sPersonFingerPrint").value = "1";
                    document.getElementById("sPersonFingerPrint").disabled = true;
                    this.props.props.ApplicantHimSelf.setValue(true);
                } else if (this.props.props.AgePerson.value < 12) {
                    document.getElementById("sPersonFingerPrint").value = "2";
                    document.getElementById("sPersonFingerPrint").disabled = true;
                    this.props.props.ApplicantHimSelf.setValue(false);
                } else if (this.props.props.AgePerson.value >= 12 && this.props.props.AgePerson.value < 18) {
                    this.props.props.ApplicantHimSelf.setValue(true);
                }


            }

        }



        setTimeout(() => {


            IBSU.onSDKConnection = () => {

                this.SetStatusMessage("Library connection Successful");
            }


            IBSU.onSDKClose = (event) => {

                this.SetStatusMessage("الخدمة متوقفه يرجى تفغيل الخدمة او اعادة تشغيلها");
            }

            IBSU.onSDKConnectionError = (event) => {

                this.SetStatusMessage('SDK Socket connect error');
            }


            IBSU.onResultImageEx = (deviceHandle, imageStatus, scannerImage, imageType, detectedFingerCount, scannerImageArray, segmentArray, nfiqArray) => {

                // scannerImage is in Bitmap format

                var imgTypeName = this.GetImageTypeName(imageType);

                var message = "";
                if (imageStatus >= IBSU_STATUS_OK) {

                    if (document.getElementById("cbDrawSegmentImage").checked) {
                        this.DrawResultQuadrangles(segmentArray);
                    }

                    this.ShowNFIQ(nfiqArray);

                    if (imageType == IBSU_ImageType.ENUM_IBSU_ROLL_SINGLE_FINGER) {
                        //BeepOK();
                        var imageElement = document.getElementById("idFpImage");
                        imageElement.setAttribute('src', "data:image/bmp;base64," + scannerImage.StrImageBitmapBase64);
                    }

                    if (imageStatus == IBSU_STATUS_OK || imageStatus == 303 || imageStatus == 604) {
                        message = imgTypeName + " acquisition successful";



                        this.state.AFIS_FAFM_Left.image.dataBytes = scannerImage.StrImageBitmapBase64 //Type 2

                        this.state.AFIS_FAFM_Right.image.dataBytes = scannerImage.StrImageBitmapBase64 //Type 1

                        this.state.AFIS_FAFM_Thumbs.image.dataBytes = scannerImage.StrImageBitmapBase64 //Type 3


                        if (this.state.TypeId == 3) {

                            const ObjectPramThumbs = this.state.AFIS_FAFM_Thumbs;

                            axios.post(this.state.ApiSendFingerToSegmntationEndPoint2, ObjectPramThumbs)
                                .then(response => {

                                    this.Stop();
                                    if (response.data == "") {

                                        alert("حصل خطا عند تقسيم الاصابع لبصمات الابهام");

                                    } else {
                                        if (response.data == "105" || response.data == "101") {

                                            alert("البصمات المرفقه غير مطابقه مع البصمات المختارة لبصمات الابهام");


                                        } else if (response.data == "408") {

                                            this.setState({
                                                AFIS_FAFM_Thumbs: { position: "Thumbs", image: { dataBytes: "", format: "bmp" }, fingerprints: [], missingFingerprints: [] },
                                            }, () => {
                                                alert("دقة بصمات البهام  قليله يرجى محاولة التبصيم مره اخرى");
                                            })


                                        }
                                        else {
                                            if (!this.state.FingerPrintExistThumb) {
                                                this.setState({
                                                    FingerPrintExistThumb: true,
                                                }, () => {

                                                    this.state.AFIS_FingerApllicationFingerModulty.fingerprintModality.fingerprints = this.state.AFIS_FingerApllicationFingerModulty.fingerprintModality.fingerprints.concat(JSON.parse(response.data).fingerprints);
                                                    this.state.AFIS_FingerApllicationFingerModulty.fingerprintModality.missingFingerprints = this.state.AFIS_FingerApllicationFingerModulty.fingerprintModality.missingFingerprints.concat(JSON.parse(response.data).missingFingerprints);
                                                    var ResponseImage = JSON.parse(response.data);

                                                    if (ResponseImage.fingerprints.length > 0) {
                                                        for (var x = 0; x < ResponseImage.fingerprints.length; x++) {
                                                            if (ResponseImage.fingerprints[x].position == 'RightThumb') {
                                                                //add image to attribute RightImageThumb
                                                                debugger;
                                                                this.props.props.ImageRightThumb.setValue(ResponseImage.fingerprints[x].image.dataBytes);

                                                            } else if (ResponseImage.fingerprints[x].position == 'LeftThumb') {
                                                                //add image to attribute LeftImageThumb
                                                                this.props.props.ImageLeftThumb.setValue(ResponseImage.fingerprints[x].image.dataBytes);

                                                            }

                                                        }
                                                        alert("تم التقاط بصمات الابهام بنجاح")

                                                    }

                                                })



                                            } else {
                                                alert("لقد تم اخذ البصمات الابهام بالفعل")
                                            }

                                        }

                                    }
                                }
                                ).catch(error => {
                                    if (confirm("قد يكون الجهاز غير متوفر او الخدمة متوقفة أو أنه لم يتم تثبيتها . هل تود تحميل تعريف الإصدار الأحدث من الخدمة؟")) {
                                        window.open("./WindowsServices/FingerPrintWindowsSetup.msi", "_base");
                                    }
                                }
                                )
                        }
                        else if (this.state.TypeId == 1 || this.state.TypeId == 5) {

                            const ObjectPramThumbs = this.state.AFIS_FAFM_Right;

                            axios.post(this.state.ApiSendFingerToSegmntation, ObjectPramThumbs)
                                .then(response => {

                                    this.Stop();
                                    if (response.data == "") {
                                        alert("حصل خطأ عند تقسيم اصابع اليد اليمنى");
                                    } else {
                                        if (response.data == "101") {
                                            alert("البصمات المرفقة غير مطايقه مع البصمات المختارة لليد اليمنى يرجى اعادة الالتقاط");
                                        } else if (response.data == "408") {

                                            this.setState({
                                                AFIS_FAFM_Right: { position: "RightHand", image: { dataBytes: "", format: "bmp" }, fingerprints: [], missingFingerprints: [] },


                                            }, () => {
                                                alert("دقة البصمات قليله  لليد اليمنى يرجى محاولة التبصيم مره اخرى");
                                            })

                                        } else {

                                            if (!this.state.FingerPrintExistRight) {
                                                this.setState({
                                                    FingerPrintExistRight: true
                                                }, () => {
                                                    debugger;
                                                    this.state.AFIS_FingerApllicationFingerModulty.fingerprintModality.fingerprints = this.state.AFIS_FingerApllicationFingerModulty.fingerprintModality.fingerprints.concat(JSON.parse(response.data).fingerprints);
                                                    this.state.AFIS_FingerApllicationFingerModulty.fingerprintModality.missingFingerprints = this.state.AFIS_FingerApllicationFingerModulty.fingerprintModality.missingFingerprints.concat(JSON.parse(response.data).missingFingerprints);
                                                    var ResponseImage = JSON.parse(response.data);

                                                    if (ResponseImage.fingerprints.length > 0) {

                                                        for (var x = 0; x < ResponseImage.fingerprints.length; x++) {

                                                            if (ResponseImage.fingerprints[x].position == 'RightIndex') {
                                                                this.props.props.ImageRightIndex.setValue(ResponseImage.fingerprints[x].image.dataBytes);
                                                            } else if (ResponseImage.fingerprints[x].position == 'RightMiddle') {
                                                                this.props.props.ImageRightMiddle.setValue(ResponseImage.fingerprints[x].image.dataBytes);
                                                            } else if (ResponseImage.fingerprints[x].position == 'RightRing') {
                                                                this.props.props.ImageRightRing.setValue(ResponseImage.fingerprints[x].image.dataBytes);
                                                            } else if (ResponseImage.fingerprints[x].position == 'RightLittle') {
                                                                this.props.props.ImageRightLittle.setValue(ResponseImage.fingerprints[x].image.dataBytes);
                                                            }

                                                        }
                                                        alert("تم التقاط بصمات اليد اليمنى بنجاح");

                                                    }


                                                })


                                            } else {
                                                alert("لقد تم اخذ البصمات اليد اليمنى بالفعل")
                                            }

                                        }



                                    }
                                }
                                ).catch(error => {
                                    if (confirm("قد يكون الجهاز غير متوفر او الخدمة متوقفة أو أنه لم يتم تثبيتها . هل تود تحميل تعريف الإصدار الأحدث من الخدمة؟")) {
                                        window.open("./WindowsServices/FingerPrintWindowsSetup.msi", "_base");
                                    }
                                }
                                )



                        } else if (this.state.TypeId == 2 || this.state.TypeId == 6) {


                            const ObjectPramThumbs = this.state.AFIS_FAFM_Left;

                            axios.post(this.state.ApiSendFingerToSegmntation, ObjectPramThumbs)
                                .then(response => {

                                    this.Stop();
                                    if (response.data == "") {
                                        alert("حصل خطأ عند تقسيم اصابع اليد اليسرى");
                                    } else {
                                        if (response.data == "101") {
                                            alert("البصمات المرفقة غير مطايقه مع البصمات المختارة لليد اليسرى يرجى اعادة الالتقاط");
                                        }
                                        else if (response.data == "408") {

                                            this.setState({

                                                AFIS_FAFM_Left: { position: "LeftHand", image: { dataBytes: "", format: "bmp" }, fingerprints: [], missingFingerprints: [] },

                                            }, () => {
                                                alert("دقه البصمات لليد اليسرى قليلة يرجى اعادة التبصيم مره اخرى");
                                            })

                                        } else {

                                            if (!this.state.FingerPrintExistLeft) {
                                                this.setState({
                                                    FingerPrintExistLeft: true
                                                }, () => {

                                                    this.state.AFIS_FingerApllicationFingerModulty.fingerprintModality.fingerprints = this.state.AFIS_FingerApllicationFingerModulty.fingerprintModality.fingerprints.concat(JSON.parse(response.data).fingerprints);
                                                    this.state.AFIS_FingerApllicationFingerModulty.fingerprintModality.missingFingerprints = this.state.AFIS_FingerApllicationFingerModulty.fingerprintModality.missingFingerprints.concat(JSON.parse(response.data).missingFingerprints);
                                                    var ResponseImage = JSON.parse(response.data);

                                                    if (ResponseImage.fingerprints.length > 0) {

                                                        for (var x = 0; x < ResponseImage.fingerprints.length; x++) {

                                                            if (ResponseImage.fingerprints[x].position == 'LeftLittle') {
                                                                this.props.props.ImageLeftLittle.setValue(ResponseImage.fingerprints[x].image.dataBytes);
                                                            } else if (ResponseImage.fingerprints[x].position == 'LeftRing') {
                                                                this.props.props.ImageLeftRing.setValue(ResponseImage.fingerprints[x].image.dataBytes);
                                                            } else if (ResponseImage.fingerprints[x].position == 'LeftMiddle') {
                                                                this.props.props.ImageLeftMiddle.setValue(ResponseImage.fingerprints[x].image.dataBytes);
                                                            } else if (ResponseImage.fingerprints[x].position == 'LeftIndex') {
                                                                this.props.props.ImageLeftIndex.setValue(ResponseImage.fingerprints[x].image.dataBytes);
                                                            }

                                                        }
                                                        alert("تم التقاط بصمات اليد اليسرى بنجاح");

                                                    }


                                                })
                                            } else {
                                                alert("لقد تم اخذ البصمات اليد اليسرى بالفعل")
                                            }


                                        }

                                    }
                                }
                                ).catch(error => {
                                    if (confirm("قد يكون الجهاز غير متوفر او الخدمة متوقفة أو أنه لم يتم تثبيتها . هل تود تحميل تعريف الإصدار الأحدث من الخدمة؟")) {
                                        window.open("./WindowsServices/FingerPrintWindowsSetup.msi", "_base");
                                    }
                                }
                                )


                        }



                    }
                    else {
                        message = "  !!Capture Warning!! (-- Warning Code " + imageStatus + " --) ";
                        let confirmMessage = message;
                        if (IBSU_Warnings[imageStatus]) confirmMessage += IBSU_Warnings[imageStatus];

                        let rollingLineElem = document.getElementById('idRollingLine');
                        rollingLineElem.style.opacity = 0.0; // Hide rolling line

                        if (confirm("  " + confirmMessage + ".  Recapture Image?")) {
                            Start();
                            return;
                        }
                    }

                } else {
                    message = imgTypeName + " --Capture Failed-- ( Error code = " + imageStatus + " ) ";
                }
                this.SetStatusMessage(message);
                this.setState({
                    captureInProgress: false
                })

                // this.state.captureInProgress = false;
                this.EnableStartButton(true);
                this.EnableSettings(true);
                this.EnableStopButton(false);
                this.EnableTakeImageButton(false);
                // var message = "No Active Capture";
                // document.getElementById("instructionsID").innerHTML = message;
                this.SetStatusMessage("تم الالتقاط بنجاح");
                this.ClearQualityIndicators();

            }

            IBSU.onPressedKeyButtons = (deviceIndex, pressedKeyButtons) => {


                var message;
                message = "OnEvent_PressedKeyButtons = " + pressedKeyButtons;
                SetStatusMessage(message);

                if (pressedKeyButtons == __LEFT_KEY_BUTTON__) {
                    if (!this.state.captureInProgress) {
                        SetBeeper(deviceHandle, ENUM_IBSU_BEEP_PATTERN_GENERIC, 2/*Sol*/, 4/*100ms = 4*25ms*/, 0, 0);
                        // CaptureStartClick();
                    }
                }
                else if (pressedKeyButtons == __RIGHT_KEY_BUTTON__) {
                    if ((this.state.captureInProgress)) {
                        SetBeeper(deviceHandle, ENUM_IBSU_BEEP_PATTERN_GENERIC, 2/*Sol*/, 4/*100ms = 4*25ms*/, 0, 0);
                        //CaptureStopClick();
                    }
                }

            }


            IBSU.onNotifyMessage = (deviceHandle, notifyMessage) => {

                this.SetStatusMessage('NotifyMessage: ' + notifyMessage);

            }



            IBSU.onClearPlatenAtCapture = (deviceIndex, platenState) => {


                if (platenState == IBSU_PlatenState.ENUM_IBSU_PLATEN_HAS_FINGERS) {
                    this.setState({
                        clearPlatenWarning: true
                    })
                    //    this.state.clearPlatenWarning = true;
                }

                else {

                    this.setState({
                        clearPlatenWarning: false
                    })
                }
                //  this.state.clearPlatenWarning = false;

                if (this.state.clearPlatenWarning) {
                    var message = "Please remove your fingers on the platen first!";
                    document.getElementById("instructionsID").innerHTML = message;
                }
                else {
                    // Display message for image acquisition again
                    this.SetStatusMessage(this.state.captureInfo.PreCaptureMessage);
                    document.getElementById("instructionsID").innerHTML = this.state.captureInfo.PreCaptureMessage;
                    this.ShowImageQuadrangle(false);

                    //if (!chkAutoCapture.Checked)
                    //    strMessage += String.Format("\r\nPress button 'Take Result Image' when image is good!");

                }

            }

            IBSU.onCompleteAcquisition = (deviceHandle, imageType) => {

                this.setState({
                    captureInProgress: false
                })
                // this.state.captureInProgress = false;
                this.EnableStartButton(true);
                this.EnableSettings(true);
                this.EnableStopButton(false);
                this.EnableTakeImageButton(false);
                this.ClearQualityIndicators();

                if (imageType === 'ENUM_IBSU_ROLL_SINGLE_FINGER') {
                    this.BeepSuccess();
                }
                else {
                    this.BeepSuccess();
                    var message = "الرجاء ازالة الاصابع عن الماسح الضوئي";
                    document.getElementById("instructionsID").innerHTML = message;
                    // this.SetStatusMessage("Acquisition completed, postprocessing..");
                    this.SetStatusMessage("تم الالتقاط بنجاح");
                }

            }

            IBSU.onTakingAcquisition = (deviceHandle, imageType) => {

                if (imageType === 'ENUM_IBSU_ROLL_SINGLE_FINGER') {
                    this.BeepOK();
                    var message = "When done remove finger from sensor";
                    document.getElementById("instructionsID").innerHTML = message;
                }
            }

            IBSU.onDeviceCommunicationBreak = (deviceIndex) => {

                this.SetStatusMessage('يرجى اعادة توصيل الجهاز ليكتمل المسح ');
                this.CloseDevice(this.state.scannerDevice);
                this.state.scannerDevice = undefined;

            }

            IBSU.onDeviceCount = (deviceCount) => {

                this.setState({
                    connectedDeviceCount: deviceCount
                })
                //  this.state.connectedDeviceCount = deviceCount;
                document.getElementById("deviceCountID").innerHTML = deviceCount;
                this.ReloadDeviceList();
            };


            IBSU.onFingerQuality = (deviceHandle, fingerQualityArray) => {

                this.ShowFingerQuality(fingerQualityArray);
            };


            IBSU.onInitProgress = (deviceIndex, progressValue) => {



                var message = + progressValue + '%' + 'جار التجهيز';
                this.SetStatusMessage(message);
                if (progressValue === 100) {
                    this.BeepSuccess();
                    this.SetStatusMessage("تم تهيئة الماسح الضوئي");

                }
            };

            IBSU.onFingerCount = (deviceHandle, fingerCountState) => {

                //document.getElementById("fingerCountID").innerHTML = fingerCountState;
                if (fingerCountState === 'ENUM_IBSU_NON_FINGER') {
                    //SetLEDs(deviceHandle, info, __LED_COLOR_RED__);   Future
                }
                else {
                    //SetLEDs(deviceHandle, info, __LED_COLOR_YELLOW__);   Future
                }

            };



        }, 2000);
    }


    BeepOK() {


        if (this.state.beeperType == IBSU_BeeperType.ENUM_IBSU_BEEPER_TYPE_NONE) {
            if (typeof (this.state.okBeepSound) !== 'undefined')
                this.state.okBeepSound.play();  // Via PC speaker
        } else {
            this.SetBeeper(this.state.scannerDevice, IBSU_BeepPattern.ENUM_IBSU_BEEP_PATTERN_GENERIC, 2/*Sol*/, 4/*300ms = 4*25ms*/, 0, 0);
        }

    }

    BeepSuccess() {


        if (this.state.beeperType == IBSU_BeeperType.ENUM_IBSU_BEEPER_TYPE_NONE) {
            if (typeof (this.state.successBeepSound) !== 'undefined')
                this.state.successBeepSound.play();  // Via PC speaker
        } else {
            this.SetBeeper(this.state.scannerDevice, IBSU_BeepPattern.ENUM_IBSU_BEEP_PATTERN_GENERIC, 2/*Sol*/, 4/*300ms = 4*25ms*/, 0, 0);
            setTimeout(() => {
                this.SetBeeper(this.state.scannerDevice, IBSU_BeepPattern.ENUM_IBSU_BEEP_PATTERN_GENERIC, 2/*Sol*/, 4/*150ms = 4*25ms*/, 0, 0);
            }, 150);
        }

    }

    BeepFail() {

        if (this.state.beeperType == IBSU_BeeperType.ENUM_IBSU_BEEPER_TYPE_NONE) {
            this.BeepOK();  // Could create fail sound here.
        } else {
            this.SetBeeper(this.state.scannerDevice, IBSU_BeepPattern.ENUM_IBSU_BEEP_PATTERN_GENERIC, 2/*Sol*/, 12/*300ms = 12*25ms*/, 0, 0);
            setTimeout(() => {
                this.SetBeeper(this.state.scannerDevice, IBSU_BeepPattern.ENUM_IBSU_BEEP_PATTERN_GENERIC, 2/*Sol*/, 6/*150ms = 6*25ms*/, 0, 0);
            }, 150);
            setTimeout(() => {
                this.SetBeeper(this.state.scannerDevice, IBSU_BeepPattern.ENUM_IBSU_BEEP_PATTERN_GENERIC, 2/*Sol*/, 6/*150ms = 6*25ms*/, 0, 0);
            }, 300);

            setTimeout(() => {
                this.SetBeeper(this.state.scannerDevice, IBSU_BeepPattern.ENUM_IBSU_BEEP_PATTERN_GENERIC, 2/*Sol*/, 6/*150ms = 6*25ms*/, 0, 0);
            }, 450);

        }

    }

    SetStatusMessage(strMessage) {
        document.getElementById("statusInfo").innerHTML = strMessage;
    }

    SetStatusSpoofMessage(strMessage) {

        document.getElementById("statusSpoof").innerHTML = strMessage;
        document.getElementById("spanSpoofEnabled").innerHTML = strMessage;
    }







    QueryImageDimensions(onCompletionCallback) {



        this.GetProperty(this.state.scannerDevice, IBSU_PropertyId.ENUM_IBSU_PROPERTY_IMAGE_WIDTH, true, (success, strImageWidth) => {
            if (!success) return;

            this.setState({
                scanDeviceWidth: Number(strImageWidth)
            })
            //   this.state.scanDeviceWidth = Number(strImageWidth);

            this.GetProperty(this.state.scannerDevice, IBSU_PropertyId.ENUM_IBSU_PROPERTY_IMAGE_HEIGHT, true, (success, strImageHeight) => {
                if (!success) return;
                this.setState({
                    scanDeviceWidth: Number(strImageHeight)
                })
                //  this.state.scanDeviceHeight = Number(strImageHeight);

                onCompletionCallback();
            });
        });
    }

    //  ------------------------------------------------------ RT Logging --------------------------------

    WriteFunctionResult(functionName, resultCode, additionalText) {

        var strFunctionResult = "-- " + functionName + " -- Return Value (" + resultCode + ")";
        if (document.getElementById("idAppendFunctionResult").checked) {
            if (this.state.appendedText.length > 0) this.state.appendedText += "\n";

            this.state.appendedText += strFunctionResult;
        } else {
            this.state.appendedText = strFunctionResult;
        }
        var functionResultBox = document.getElementById("idFunctionResult");
        functionResultBox.innerHTML = this.state.appendedText;
        functionResultBox.scrollTop = functionResultBox.scrollHeight;
        document.getElementById("idAdditionalInformation").innerHTML = additionalText;
    }

    between(x, min, max) {
        return x >= min && x <= max;
    }

    // -------------------------------------------------ENCRYPTION SUPPORT -------------------------------------
    //  -------  Process; Run GetProperty to get current value; if checkbox is checked, Set Property to enabled

    funcSetEncrypt() {



        if (document.getElementById("cbEnableEncrypt").checked === true) {
            GetProperty(this.state.scannerDevice,
                IBSU_PropertyId.ENUM_IBSU_PROPERTY_ENABLE_ENCRYPTION,
                false,
                (success, strEnableEncrypt) => {
                    if (!success) {
                        document.getElementById("spanEncryptEnabled").innerHTML =
                            "is like " + success + "   " + strEnableEncrypt;
                        return;
                    }
                    if (strEnableEncrypt === 'FALSE') {
                        this.SetProperty(this.state.scannerDevice,
                            IBSU_PropertyId.ENUM_IBSU_PROPERTY_ENABLE_ENCRYPTION,
                            'TRUE',
                            (bSuccess) => {
                                if (!bSuccess) return; // Error message already shown
                            });
                        document.getElementById("spanEncryptEnabled").innerHTML = "Encryption Enabled";
                    }
                });

        }
        if (document.getElementById("cbEnableEncrypt").checked === false) {

            this.GetProperty(this.state.scannerDevice,
                IBSU_PropertyId.ENUM_IBSU_PROPERTY_ENABLE_ENCRYPTION,
                false,
                (success, strEnableEncrypt) => {
                    if (!success) return;
                    if (strEnableEncrypt === 'TRUE') {
                        this.SetProperty(this.state.scannerDevice,
                            IBSU_PropertyId.ENUM_IBSU_PROPERTY_ENABLE_ENCRYPTION,
                            'FALSE',
                            true,
                            (bSuccess) => {
                                if (!bSuccess) return; // Error message already shown
                            });
                    }
                });
            document.getElementById("spanEncryptEnabled").innerHTML = "Encryption Disabled";
        }
    }

    // --------------------------------------------------------  SPOOFING -------------------------------------

    funcGetSpoofSupport() {


        this.GetProperty(this.state.scannerDevice, IBSU_PropertyId.ENUM_IBSU_PROPERTY_IS_SPOOF_SUPPORTED,
            false,
            (success, strSpoofSupport) => {

                if (!success) return;
                if (strSpoofSupport === 'TRUE') {
                    if (document.getElementById("cbEnableSpoof").checked === true) {
                        document.getElementById("cbEnableSpoof").enabled = true;
                        this.setState({
                            strSpoofStatus: "Spoof Supported"
                        })

                        this.SetStatusSpoofMessage(this.state.strSpoofStatus);
                    } else {
                        if (document.getElementById("cbEnableSpoof").checked === false) {
                            document.getElementById("cbEnableSpoof").disabled = true;
                            this.setState({
                                strSpoofStatus: "Spoof Supported but Disabled"
                            })

                            this.SetStatusSpoofMessage(this.state.strSpoofStatus);
                        }
                    }
                } else {
                    document.getElementById("cbEnableSpoof").checked = false;
                    document.getElementById("cbEnableSpoof").enabled = false;
                    this.setState({
                        strSpoofStatus: "Spoof Not Supported"
                    })

                    this.SetStatusSpoofMessage(this.state.strSpoofStatus);
                }
            });
    }

    SetupSpoofing() {

        this.setState({
            strSpoofStatus: ""
        })

        if (document.getElementById("cbEnableSpoof").checked === true) {
            this.SetProperty(this.state.scannerDevice,
                IBSU_PropertyId.ENUM_IBSU_PROPERTY_ENABLE_SPOOF,
                'TRUE',
                (bSuccess) => {
                    if (!bSuccess) return; // Error message already shown

                });
            // ---  Set the Sensitivity as per the text box
            if ((document.getElementById("txtSpoofSensi").value) !== "") {
                if (between(Number(document.getElementById("txtSpoofSensi").value), 1, 10)) {
                    this.SetProperty(this.state.scannerDevice,
                        IBSU_PropertyId.ENUM_IBSU_PROPERTY_SPOOF_LEVEL,
                        (document.getElementById("txtSpoofSensi").value),
                        (bSuccess) => {
                            if (!bSuccess) return; // Error message already shown
                            this.setState({
                                strSpoofStatus: "Spoof Enabled; Sensitivity: " + (document.getElementById("txtSpoofSensi").value)
                            })
                                ;
                            this.SetStatusSpoofMessage(this.state.strSpoofStatus);
                        });
                }
            }
        } else {
            this.setState({
                strSpoofStatus: "Spoof Disabled"
            })

        }
    }


    //  -------------------------------------------OPEN DEVICE----------------------------------



    OpenDevice(deviceIndex, needClearPlaten, onCompletionCallback) {



        if (typeof (this.state.scannerDevice) !== 'undefined') {
            this.EnableStopButton(true);
            this.EnableTakeImageButton(true);
            onCompletionCallback();
            return; // already open
        }

        IBSU.OpenDevice(deviceIndex, needClearPlaten, (handle) => {

            this.setState({
                scannerDevice: handle
            })
            // this.state.scannerDevice = handle;

            this.QueryImageDimensions(() => {
                this.EnableStopButton(true);
                this.EnableTakeImageButton(true);
                onCompletionCallback();
            });
        }, (errorObj) => {
            this.EnableStartButton(true);
            this.EnableSettings(true);
            //omran
            // this.SetStatusMessage('Unable to open device #' + deviceIndex + ': ' + errorObj.message + '(' + errorObj.code + ')');
            this.SetStatusMessage("الماسح الضوئي مجهز  يرجى اخد البصمات");

        });

    }

    CloseDevice(deviceHandle) {

        if (typeof (deviceHandle) !== 'undefined') {

            IBSU.CloseDevice(deviceHandle, () => {

            }, (errorObj) => {
                this.SetStatusMessage('Unable to close device #' + deviceHandle + ': ' + errorObj.message + '(' + errorObj.code + ')');
                this.WriteFunctionResult(funcName, errorObj.code, errorObj.message);
            });
        }

    }

    GetLEDs(deviceHandle) {

        let funcName = "IBSU.GetLEDs";
        IBSU.GetLEDs(deviceHandle, (activeLEDs) => {
            var message = "Active LEDs: 0x" + activeLEDs.toString(16);
            this.SetStatusMessage(message);

        }, (errorObj) => {
            this.SetStatusMessage("Unable to get LEDs: " + errorObj.message + '(' + errorObj.code + ')');
            this.WriteFunctionResult(funcName, errorObj.code, errorObj.message);
        });

    };

    SetLEDs(deviceHandle, activeLEDs) {

        let funcName = "IBSU.SetLEDs";
        IBSU.SetLEDs(deviceHandle, activeLEDs, () => {
            var message = "LEDs were set to 0x" + activeLEDs.toString(16);
            this.SetStatusMessage(message);

        }, (errorObj) => {
            this.SetStatusMessage("Unable to set LEDs: " + errorObj.message + '(' + errorObj.code + ')');
            this.WriteFunctionResult(funcName, errorObj.code, errorObj.message);
        });

    };



    // ----------------------------------  Helper Functions --------------------------------------

    IBSU_SetProcessingOptions(width, height, nfiq, onCompletionCallback) {

        let funcName = "IBSU.SetProcessingOptions";
        IBSU.SetProcessingOptions(width, height, nfiq, () => {
            onCompletionCallback(true);

        }, (errorObj) => {
            this.SetStatusMessage("Unable to set processing options: " + errorObj.message + '(' + errorObj.code + ')');
            this.WriteFunctionResult(funcName, errorObj.code, errorObj.message);
            onCompletionCallback(false);

        });
    }


    // NOTE: this works, but is too slow to use at frame preview rates.  Rolling
    // info is sent with preview in this application
    BGetRollingInfo(deviceHandle, onCompletionCallback) {

        let funcName = "IBSU.BGetRollingInfo";
        IBSU.BGetRollingInfo(deviceHandle, (rollingInformation) => {
            onCompletionCallback(true, rollingInformation);

        }, (errorObj) => {
            this.SetStatusMessage("Unable to get rolling information: " + errorObj.message + '(' + errorObj.code + ')');
            this.WriteFunctionResult(funcName, errorObj.code, errorObj.message);
            onCompletionCallback(false, undefined);

        });
    }



    IBSU_IsCaptureAvailable(deviceHandle, imageType, imageResolution, onCompletionCallback) {

        IBSU.IsCaptureAvailable(deviceHandle, imageType, imageResolution, (bIsAvailable) => {
            onCompletionCallback(bIsAvailable);

        }, (errorObj) => {
            this.SetStatusMessage("Unable to get capture available status: " + errorObj.message + '(' + errorObj.code + ')');
            this.WriteFunctionResult(funcName, errorObj.code, errorObj.message);
            onCompletionCallback(false);

        });
    }

    IBSU_BeginCaptureImage(deviceHandle, imageType, imageResolution, captureOptions, onCompletionCallback) {


        IBSU.BeginCaptureImage(deviceHandle, imageType, imageResolution, captureOptions, () => {
            onCompletionCallback(true, "");

        }, (errorObj) => {
            var message = "Unable to start capture: " + errorObj.message + '(' + errorObj.code + ')';
            onCompletionCallback(false, "الماسح الضوئي مجهز  يرجى اخد البصمات");

        });
    }


    IBSU_CancelCaptureImage(deviceHandle) {

        IBSU.CancelCaptureImage(deviceHandle, () => {
            //    WriteFunctionResult(funcName, 0, 'Capture cancelled');

        }, (errorObj) => {
            //   WriteFunctionResult(funcName, errorObj.code, errorObj.message);

        });

    }


    // onCompletion is optional function
    SetBeeper(handle, beepPattern, soundTone, duration, reserved_1, reserved_2) {

        IBSU.SetBeeper(handle, beepPattern, soundTone, duration, reserved_1, reserved_2, () => {

        }, (errorObj) => {
            // this.SetStatusMessage("Unable to set beeper: " + errorObj.message + '(' + errorObj.code + ')');
            // this.WriteFunctionResult(funcName, errorObj.code, errorObj.message);
        });

    };

    GetOperableLEDs(deviceHandle) {

        let funcName = "GetOperableLEDs";
        IBSU.GetOperableLEDs(deviceHandle, (ledInfo) => {
            var message = "LED type: " + ledInfo.LedType + ", LED Count: " + ledInfo.LedCount + ", Operable LEDs: 0x" + ledInfo.OperableLEDs.toString(16);
            this.SetStatusMessage(message);

        }, (errorObj) => {
            this.SetStatusMessage("Unable to get operable LEDs: " + errorObj.message + '(' + errorObj.code + ')');
            this.WriteFunctionResult(funcName, errorObj.code, errorObj.message);
        });

    };


    IBSU_GetOperableBeeper(deviceHandle, completionCallback) {

        IBSU.GetOperableBeeper(deviceHandle, (beeperType) => {
            completionCallback(true, beeperType);

        }, (errorObj) => {
            //  Expected error type, device not capable - SetStatusMessage("Unable to get operable Beeper: " + errorObj.message + '(' + errorObj.code + ')');
            completionCallback(false, undefined);
        });

    };

    // Set the little picture of the scanner based on the product name;  images in /images folder
    funcScannerImage(strScannerImgName) {

        if (strScannerImgName === "KOJAK") {
            document.getElementById("spanScannerImage").innerHTML =
                '<img src="images/IBSU_Kojak.png" width="115" height="124" style="position: absolute;"/>';

        }
        if (strScannerImgName === "WATSON MINI") {
            document.getElementById("spanScannerImage").innerHTML =
                '<img src="images/IBSU_Watson.png" width="115" height="124" style="position: absolute;"/>';
        }
        if (strScannerImgName === "COLUMBO") {
            document.getElementById("spanScannerImage").innerHTML =
                '<img src="images/IBSU_Columbo.png" width="115" height="124" style="position: absolute;"/>';
        }
    }

    // Function array to fill dropdown list by querying devices



    // Query device type and add to dropdown list
    ShowDeviceInfo(index) {


        this.GetDeviceDescription(index, (index, devDescription) => {
            var strDevice = devDescription.productName;
            this.funcScannerImage(devDescription.productName);
            var strDevice2 = devDescription.productName + "<br /> Version: " + devDescription.fwVersion + "<br /> Serial Number: " + devDescription.serialNumber;
            document.getElementById("spanDeviceDescription").innerHTML = strDevice2;
            this.state.deviceDesc.push(devDescription);
            var opt = document.createElement('option');
            opt.value = index;
            if (index == 0) opt.selected = true;
            opt.innerHTML = strDevice;
            var select = document.getElementById("scanners");
            select.appendChild(opt);


            this.state.isDeviceLocked = devDescription.IsDeviceLocked;
            this.ShowDeviceLockStatus();

            if (index == this.state.connectedDeviceCount - 1) {
                // Last one now present - set capture options
                this.SetCaptureOptions();
            } else {
                this.state.dropdownFillFunctions[index + 1](); // Execute next loop iteration
            }
        });

    }

    GetDeviceDescription(deviceIndex, callback) {

        IBSU.GetDeviceDescription(deviceIndex, (deviceDescription) => {

            callback(deviceIndex, deviceDescription);
        }, function onError(errorObj) {
            this.SetStatusMessage("Unable to get device description: " + errorObj.message + '(' + errorObj.code + ')');
            WriteFunctionResult("GetDeviceDescription", errorObj.code, errorObj.message);
        });

    }


    // GetDeviceDescription() {
    //     
    //     var deviceIndex = document.getElementById("scanners").selectedIndex;
    //     IBSU.GetDeviceDescription(deviceIndex, (deviceDescription) => {
    //         
    //         callback(deviceIndex, deviceDescription);
    //         
    //     }, (errorObj) => {
    //         
    //         this.SetStatusMessage("Unable to get device description: " + errorObj.message + '(' + errorObj.code + ')');
    //         this.WriteFunctionResult("GetDeviceDescription", errorObj.code, errorObj.message);
    //     });

    // }



    ShowDeviceLockStatus() {

        document.getElementById("spanDeviceLocked").innerHTML = "Locked: " + this.state.isDeviceLocked;
        document.getElementById("txtCustomerKey").disabled = !this.state.isDeviceLocked;  // Ask for customer key if locked
    }

    // Clear and re-query for identifying information for all devices

    ReloadDeviceList() {

        this.CloseDevice(this.state.scannerDevice); // Inc case it was open
        this.setState({
            scannerDevice: undefined
        })
        // this.state.scannerDevice = undefined;

        this.state.deviceDesc = [];
        document.getElementById("spanSpoofEnabled").innerHTML = "";
        document.getElementById("spanEncryptEnabled").innerHTML = "";
        document.getElementById("spanDeviceDescription").innerHTML = "";


        // Query device names
        var dropdownFillFunctions = [];

        var select = document.getElementById("scanners");
        select.options.length = 0;//remove all options

        for (let i = 0; i < this.state.connectedDeviceCount; i++) {
            dropdownFillFunctions[i] = this.ShowDeviceInfo.bind(null, i);
        }

        if (this.state.connectedDeviceCount == 0) {
            // SetCaptureOptions() if loop didn't run
            this.SetCaptureOptions();
            // alert("الرجاء توصيل جهاز ماسح البصمات بالكميوتر");
        } else {
            dropdownFillFunctions[0](); // Start fill loop iterations
        }
    }

    GetImageTypeName(imageType) {

        var imgTypeName = "-- Unknown --";
        switch (imageType) {
            case IBSU_ImageType.ENUM_IBSU_ROLL_SINGLE_FINGER:
                imgTypeName = "-- Rolling single finger --";
                break;
            case IBSU_ImageType.ENUM_IBSU_FLAT_SINGLE_FINGER:
                imgTypeName = "-- Flat single finger --";
                break;
            case IBSU_ImageType.ENUM_IBSU_FLAT_TWO_FINGERS:
                imgTypeName = "-- Flat two fingers --";
                break;
            case IBSU_ImageType.ENUM_IBSU_FLAT_FOUR_FINGERS:
                imgTypeName = "-- Flat 4 fingers --";
                break;
            default:
                break;
        }
        return imgTypeName;
    }

    SetProperty(deviceHandle, propertyType, propertyValue, onCompletionCallback) {

        let funcName = "SetProperty";
        IBSU.SetProperty(deviceHandle, propertyType, propertyValue, () => {
            onCompletionCallback(true);

        }, (errorObj) => {
            this.SetStatusMessage("Unable to set property " + propertyType + " to " + propertyValue + ": " + errorObj.message + '(' + errorObj.code + ')');
            this.WriteFunctionResult(funcName, errorObj.code, errorObj.message);
            onCompletionCallback(false);

        });
    }


    GetProperty(deviceHandle, propertyType, showError, onCompletionCallback) {

        let funcName = "GetProperty";
        IBSU.GetProperty(deviceHandle, propertyType, (propertyValue) => {
            onCompletionCallback(true, propertyValue);

        }, (errorObj) => {
            if (showError) {
                this.SetStatusMessage("Unable to Get property " + propertyType + ": " + errorObj.message + '(' + errorObj.code + ')');
                this.WriteFunctionResult(funcName, errorObj.code, errorObj.message);
            }
            onCompletionCallback(false, undefined);

        });
    }

    SetContrast(deviceHandle, contrastValue) {

        let funcName = "SetContrast";
        IBSU.SetContrast(deviceHandle, contrastValue, () => {
            this.WriteFunctionResult(funcName, 0, 'Contrast Value set to ' + contrastValue);
        }, (errorObj) => {
            this.WriteFunctionResult(funcName, errorObj.code, errorObj.message);
        });
    }



    GetContrast(deviceHandle, onCompletionCallback) {

        let funcName = "GetContrast";
        IBSU.GetContrast(deviceHandle, (contrastValue) => {
            this.WriteFunctionResult(funcName, 0, 'Conctrast Value: ' + contrastValue);

            //document.getElementById("idContrastValue").value = contrastValue;
            onCompletionCallback(contrastValue);

        }, (errorObj) => {
            this.WriteFunctionResult(funcName, errorObj.code, errorObj.message);
        });
    }




    // -------------------------------------------------------------------------------------------------------
    // Callbacks from IBScanUltimate Web SDK interface



    ShowNFIQ(nfiqArray) {

        if (document.getElementById("cbNFIQ").checked) {
            var separator = '';
            var nfiqString = "";
            var i = 0;
            for (i = 0; i < nfiqArray.length; i++) {
                nfiqString += separator + nfiqArray[i];
                separator = "-";
            }

            document.getElementById("idNFIQResults").innerHTML = nfiqString + "  " + "دقــة البصمات";

            if (nfiqString) {
                for (var x = 0; x < nfiqString.split("-").length; x++) {
                    if (nfiqString.split("-")[x] > 1) {
                        this.setState({
                            SigPicTrue: false
                        })
                    }
                }
            }
        }
    }

    DrawResultQuadrangles(segmentArray) {



        // Scale from device to display
        var xScale = 320 / this.state.scanDeviceWidth;
        var yScale = 300 / this.state.scanDeviceHeight;

        var i = 0;
        for (i = 0; i < segmentArray.length; i++) {


            var quadrangle = segmentArray[i];

            var quadranglePoints =
                quadrangle.x1 * xScale + "," + quadrangle.y1 * yScale + " " +
                quadrangle.x2 * xScale + "," + quadrangle.y2 * yScale + " " +
                quadrangle.x3 * xScale + "," + quadrangle.y3 * yScale + " " +
                quadrangle.x4 * xScale + "," + quadrangle.y4 * yScale + " " +
                quadrangle.x1 * xScale + "," + quadrangle.y1 * yScale;

            var elementName = "idQuadrangle" + i;
            var quadrangleElement = document.getElementById(elementName);
            quadrangleElement.setAttribute("points", quadranglePoints);
            quadrangleElement.style.opacity = 1.0;
        }

    }





    DrawRollingLine(rollingInformation) {



        if (!rollingInformation) return;  // Not yet active

        if (rollingInformation.RollingLineX <= 0 || rollingInformation.RollingLineX >= this.state.scanDeviceWidth) return;

        var rollingLineColor = "black";
        switch (rollingInformation.RollingState) {

            case IBSU_RollingState.ENUM_IBSU_ROLLING_TAKE_ACQUISITION:
                rollingLineColor = "red";
                break;

            case IBSU_RollingState.ENUM_IBSU_ROLLING_COMPLETE_ACQUISITION:
                rollingLineColor = "green";
                break;

            default:
                return;
        }


        var rollingLineElem = document.getElementById('idRollingLine');
        rollingLineElem.style.stroke = rollingLineColor;
        var lineXPosition = rollingInformation.RollingLineX * 320 / 320;
        rollingLineElem.setAttribute("y2", 300);
        rollingLineElem.setAttribute("x1", lineXPosition);
        rollingLineElem.setAttribute("x2", lineXPosition);
        rollingLineElem.style.opacity = 1.0; // Ensure visibility

    }





    ShowFingerQuality(fingerQualityArray) {


        // fingerQualityArray is array of 4 integers

        var i;
        for (i = 0; i < fingerQualityArray.length; i++) {
            var fillColor = 'red';
            var opacity = 1.0;

            if (this.state.clearPlatenWarning) {
                if (!this.state.isBlank) {
                    fillColor = 'red';
                }
                else {
                    opacity = 0.0;
                }
            }
            else {

                switch (fingerQualityArray[i]) {
                    case IBSU_FingerQualityState.ENUM_IBSU_QUALITY_GOOD:
                        fillColor = 'lime';  // Light green
                        break;
                    case IBSU_FingerQualityState.ENUM_IBSU_QUALITY_FAIR:
                        fillColor = 'orange';
                        break;
                    case IBSU_FingerQualityState.ENUM_IBSU_QUALITY_POOR:
                        fillColor = 'red';
                        break;
                    case IBSU_FingerQualityState.ENUM_IBSU_FINGER_NOT_PRESENT:
                        opacity = 0.0;
                        break;
                    case IBSU_FingerQualityState.ENUM_IBSU_QUALITY_INVALID_AREA_TOP:
                        fillColor = 'red';
                        break;
                    case IBSU_FingerQualityState.ENUM_IBSU_QUALITY_INVALID_AREA_LEFT:
                        fillColor = 'red';
                        break;
                    case IBSU_FingerQualityState.ENUM_IBSU_QUALITY_INVALID_AREA_RIGHT:
                        fillColor = 'red';
                        break;
                    default:
                        return;
                }

            }
            var elementName = 'idQuality' + i;
            document.getElementById(elementName).style.fill = fillColor;
            document.getElementById(elementName).style.opacity = opacity;
        }
    };



    SetCaptureOptions() {


        this.CloseDevice(this.state.scannerDevice); // In case device was already open
        this.setState({
            scannerDevice: undefined
        })
        //  this.state.scannerDevice = undefined;

        var select = document.getElementById("captureType");
        select.options.length = 0;//remove all options
        var index = document.getElementById("scanners").selectedIndex;
        if (this.state.deviceDesc[index]) {
            var product = this.state.deviceDesc[index].productName.trim();

            this.AddOption(select, -1, "Capture");

            if ((product === "WATSON") ||
                (product === "WATSON MINI") ||
                (product === "SHERLOCK_ROIC") ||
                (product === "SHERLOCK")) {

                this.AddOption(select, IBSU_ImageType.ENUM_IBSU_FLAT_SINGLE_FINGER, CAPTURE_SEQ_FLAT_SINGLE_FINGER);
                this.AddOption(select, IBSU_ImageType.ENUM_IBSU_ROLL_SINGLE_FINGER, CAPTURE_SEQ_ROLL_SINGLE_FINGER);
                this.AddOption(select, IBSU_ImageType.ENUM_IBSU_FLAT_TWO_FINGERS, CAPTURE_SEQ_2_FLAT_FINGERS);
                //m_cboCaptureSeq.Items.Add(CAPTURE_SEQ_10_SINGLE_FLAT_FINGERS);
                //m_cboCaptureSeq.Items.Add(CAPTURE_SEQ_10_SINGLE_ROLLED_FINGERS);
            }
            else if ((product === "COLUMBO") ||
                (product === "CURVE")) {
                this.AddOption(select, IBSU_ImageType.ENUM_IBSU_FLAT_SINGLE_FINGER, CAPTURE_SEQ_FLAT_SINGLE_FINGER);
                //m_cboCaptureSeq.Items.Add(CAPTURE_SEQ_10_SINGLE_FLAT_FINGERS);
            }
            else if ((product === "HOLMES") ||
                (product === "KOJAK") ||
                (product === "FIVE-0")) {
                this.AddOption(select, IBSU_ImageType.ENUM_IBSU_FLAT_SINGLE_FINGER, CAPTURE_SEQ_FLAT_SINGLE_FINGER);
                this.AddOption(select, IBSU_ImageType.ENUM_IBSU_ROLL_SINGLE_FINGER, CAPTURE_SEQ_ROLL_SINGLE_FINGER);
                this.AddOption(select, IBSU_ImageType.ENUM_IBSU_FLAT_TWO_FINGERS, CAPTURE_SEQ_2_FLAT_FINGERS);
                this.AddOption(select, IBSU_ImageType.ENUM_IBSU_FLAT_FOUR_FINGERS, CAPTURE_SEQ_4_FLAT_FINGERS);
                //m_cboCaptureSeq.Items.Add(CAPTURE_SEQ_10_SINGLE_FLAT_FINGERS);
                //m_cboCaptureSeq.Items.Add(CAPTURE_SEQ_10_SINGLE_ROLLED_FINGERS);
                //m_cboCaptureSeq.Items.Add(CAPTURE_SEQ_10_FLAT_WITH_4_FINGER_SCANNER);
            } else
                alert("Unrecognized product name: (" + product + ")");



            select.disabled = false;
        }
        else {
            select.disabled = true;
        }
        this.SetStartStopButtons();
    }

    AddOption(select, selValue, strText) {

        var opt = document.createElement('option');
        opt.value = selValue;
        opt.innerHTML = strText;
        select.appendChild(opt);
    }

    SetStartStopButtons() {

        this.setState({
            SigPicTrue: false
        }, () => {
            var deviceIndex = document.getElementById("scanners").selectedIndex;
            var captureTypeIndex;
            if (this.state.TypeId == 1) {
                // Four Finger
                //  var captureTypeIndex = document.getElementById("captureType").selectedIndex;
                document.getElementById("WichHandSelector").innerHTML = "التقاط بصمات اليد اليمنى";
                document.getElementById("captureType").selectedIndex = 4;
                captureTypeIndex = 4;
            } else if (this.state.TypeId == 2) {
                // Four Finger
                document.getElementById("WichHandSelector").innerHTML = "التقاط بصمات اليد اليسرى";
                document.getElementById("captureType").selectedIndex = 4;
                captureTypeIndex = 4;
            } else if (this.state.TypeId == 3) {
                // Two Finger
                document.getElementById("WichHandSelector").innerHTML = "التقاط بصمات الابهام";
                document.getElementById("captureType").selectedIndex = 3;
                captureTypeIndex = 3;
            } else if (this.state.TypeId == 5) {
                // One Finger
                document.getElementById("WichHandSelector").innerHTML = "التقاط بصمات اليد اليمنى بصمة اصبع";
                document.getElementById("captureType").selectedIndex = 1;
                captureTypeIndex = 1;

            } else if (this.state.TypeId == 6) {
                // One Finger
                document.getElementById("WichHandSelector").innerHTML = "التقاط بصمات اليد اليسرى بصمة اصبع";
                document.getElementById("captureType").selectedIndex = 1;
                captureTypeIndex = 1;
            }

            var enabled = (captureTypeIndex > 0) && (deviceIndex >= 0);
            this.EnableStartButton(enabled);
            this.EnableSettings(true);
            this.EnableStopButton(false);
            this.EnableTakeImageButton(false);
            if (deviceIndex == -1) {
                alert("الرجاء توصيل جهاز ماسح البصمات بالكميوتر");
            } else {
                this.Start();
            }


        })


    }


    ClearQuadrangles() {

        var i = 0;
        for (i = 0; i < 4; i++) {
            var quadrangleElement = document.getElementById("idQuadrangle" + i);
            quadrangleElement.style.opacity = 0.0;
        }

    }

    ClearQualityIndicators() {

        var i;
        for (i = 0; i < 4; i++) {
            var elementName = 'idQuality' + i;
            document.getElementById(elementName).style.opacity = 0.0;
        }

        var rollingLineElem = document.getElementById('idRollingLine');
        rollingLineElem.style.opacity = 0.0; // Hide rolling line

    }

    EnableStartButton(bEnable) {

        document.getElementById("btStart").disabled = !bEnable;
    }

    EnableStopButton(bEnable) {
        document.getElementById("btStop").disabled = !bEnable;
    }

    EnableTakeImageButton(bEnable) {
        document.getElementById("btTakeImage").disabled = !bEnable;
    }

    EnableSettings(bEnable) {
        let elementIds = ["cbAutoContrast", "cbAutoCapture", "cbEnableEncrypt", "cbInvalidFinger",
            "cbClearPlaten", "cbDrawSegmentImage", "cbNFIQ", "cbEnableSpoof", "cbDetectSmear", "txtSpoofSensi", "cboSmearLevel"];
        for (let i = 0; i < elementIds.length; i++) {
            document.getElementById(elementIds[i]).disabled = !bEnable;
        }

    }


    // Set capture information record based on form selections
    SetCaptureInfo() {

        var scannerElement = document.getElementById("scanners");
        var scannerOptionIndex = scannerElement.selectedIndex;
        var deviceIndex = Number(scannerElement.options[scannerOptionIndex].value);

        var select = document.getElementById("captureType");
        var captureTypeIndex = select.selectedIndex;
        if (captureTypeIndex <= 0) {
            this.SetStatusMessage("الرجاء اختيار اليد للتبصيم");
            return false;
        }
        this.state.captureInfo.deviceIndex = deviceIndex;
        this.state.captureInfo.ImageTypeText = select.options[captureTypeIndex].text;
        this.state.captureInfo.ImageType = Number(select.options[captureTypeIndex].value);

        if (this.state.captureInfo.ImageType == IBSU_ImageType.ENUM_IBSU_FLAT_SINGLE_FINGER) {
            this.state.captureInfo.PreCaptureMessage = "الرجاء وضع اصبع واحد على الماسح الضوئي";
            this.state.captureInfo.PostCaptureMessage = "امسك اصبعك على الماسح!";
            this.state.captureInfo.NumberOfFinger = 1;
            this.state.captureInfo.fingerName = "SFF_Unknown";
            this.SetStatusMessage("تم تهئيه الماسح الضوئي");
        } else if (this.state.captureInfo.ImageType == IBSU_ImageType.ENUM_IBSU_ROLL_SINGLE_FINGER) {
            this.state.captureInfo.PreCaptureMessage = "التقاط لفة: ضع إصبعًا واحدًا مسطحًا على الماسح الضوئي!";
            this.SetStatusMessage("Roll Capture");
            this.state.captureInfo.PostCaptureMessage = "Roll finger!";
            this.state.captureInfo.NumberOfFinger = 1;
            this.state.captureInfo.fingerName = "SRF_Unknown";
        } else if (this.state.captureInfo.ImageType == IBSU_ImageType.ENUM_IBSU_FLAT_TWO_FINGERS) {
            this.state.captureInfo.PreCaptureMessage = "ضع إصبعين على الماسح!";
            this.state.captureInfo.PostCaptureMessage = "ابق أصابعك على المستشعر!";
            this.state.captureInfo.NumberOfFinger = 2;
            this.state.captureInfo.fingerName = "TFF_Unknown";
            this.SetStatusMessage("تم تهئيه الماسح الضوئي");
        } else if (this.state.captureInfo.ImageType == IBSU_ImageType.ENUM_IBSU_FLAT_FOUR_FINGERS) {
            this.state.captureInfo.PreCaptureMessage = "ضع 4 أصابع على المستشعر!";
            this.state.captureInfo.PreCaptureMessage = "الرجاء وضع اربعة أصابع على الماسح الضوئي";
            this.state.captureInfo.NumberOfFinger = 4;
            this.state.captureInfo.fingerName = "4FF_Unknown";
            this.SetStatusMessage("تم تهئيه الماسح الضوئي");
        }

        return true;
    }

    // Optimize image sizes for different scanner dimensions and aspect ratios
    AdjustImageSizes() {


        // Small size for better performance at frame rate; preview sizes are best as an even divisor
        let divisor = 2;
        if (this.state.scanDeviceWidth > 800) {
            divisor = 4;
        }
        this.setState({
            previewWidth: this.state.scanDeviceWidth / divisor,
            previewHeight: this.state.scanDeviceHeight / divisor,
            viewWidth: 320,
            viewHeight: 300
        })
        // this.state.previewWidth = this.state.scanDeviceWidth / divisor;
        // this.state.previewHeight = this.state.scanDeviceHeight / divisor;

        // Physical space available in web page view

        //     this.state.viewWidth = 320;
        //   this.state.viewHeight = 300;

        // Set HTML view image to same proportion as scanner
        var xScale = this.state.scanDeviceWidth / 320;
        var yScale = this.state.scanDeviceHeight / 300;

        var scale = yScale;
        if (xScale > yScale) {
            scale = xScale;
        }
        this.setState({
            viewWidth: this.state.scanDeviceWidth / scale,
            viewHeight: this.state.scanDeviceHeight / scale
        })
        // this.state.viewWidth = this.state.scanDeviceWidth / scale;
        //this.state.viewHeight = this.state.scanDeviceHeight / scale;

        var imageElement = document.getElementById("idFpImage");
        imageElement.height = 300;
        imageElement.width = 320;

        imageElement = document.getElementById("svgImageOverlays");
        imageElement.setAttribute("height", 300);
        imageElement.setAttribute("width", 320);

    }

    ShowImageVewer() {

        var foo = document.getElementById('IV01');

        if (foo.style.display == '' || foo.style.display == 'none') {
            foo.style.display = 'block';
        }
    }

    // ----------------  Begin Enable Capture ---------------------
    // Device is open and initialized... begin capture
    // This sequence of procedures handle the asynchronous flow
    // without excessive nesting.
    Start() {

        if (!this.SetCaptureInfo()) return;

        this.ShowImageVewer();

        this.setState({
            clearPlatenWarning: false
        })
        //  this.state.clearPlatenWarning = false;

        this.ClearQuadrangles();
        document.getElementById("idNFIQResults").innerHTML = "";

        this.UnlockDevice();

        this.EnableStartButton(false);
        this.EnableSettings(false);
    }

    // Check for locked device and unlock if necessary, then proceed to open
    UnlockDevice() {



        if (this.state.isDeviceLocked) {
            let customerKey = document.getElementById("txtCustomerKey").value;
            if (!customerKey) {
                alert("Device is locked, customer key required.");
                return;
            }
            // Perform unlock
            IBSU.SetCustomerKey(this.state.captureInfo.deviceIndex, IBSU_HashType.ENUM_IBSU_HASH_TYPE_SHA256, customerKey,
                () => {
                    this.state.isDeviceLocked = false; // Now unlocked
                    this.ShowDeviceLockStatus();
                    this.EnsureOpen();  // Proceed to open

                }, (errorObj) => {
                    this.WriteFunctionResult("IBSU.SetCustomerKey", errorObj.code, errorObj.message);
                }
            );

        } else {
            this.EnsureOpen();  // Proceed to open
        }
    }


    EnsureOpen() {

        this.OpenDevice(this.state.captureInfo.deviceIndex, document.getElementById("cbClearPlaten").checked, () => {
            this.funcSetEncrypt();
            this.funcGetSpoofSupport();
            this.SetupSpoofing();
            this.BeginCapture00();
        });

    }


    BeginCapture00() {

        // Width, height
        let needNFIQ = document.getElementById("cbNFIQ").checked;

        this.AdjustImageSizes();

        this.IBSU_SetProcessingOptions(400, 375, needNFIQ, (success) => {
            if (!success) return;  // Error message already shown
            this.BeginCapture01();
        });

    }



    BeginCapture01() {

        if (this.state.captureInfo.ImageType != IBSU_ImageType.ENUM_IBSU_ROLL_SINGLE_FINGER) {
            // Don't send roll configuration to devices that don't support that mode
            this.BeginCapture02();  // Next step
            return;
        }

        if (document.getElementById("cbDetectSmear").checked) {
            this.SetProperty(this.state.scannerDevice, IBSU_PropertyId.ENUM_IBSU_PROPERTY_ROLL_MODE, '1', (bSuccess) = () => {
                if (!bSuccess) return; // Error message already shown

                var smearIndex = document.getElementById("cboSmearLevel").selectedIndex.toString();
                this.SetProperty(this.state.scannerDevice, IBSU_PropertyId.ENUM_IBSU_PROPERTY_ROLL_LEVEL, smearIndex, (bSuccess) = () => {
                    if (!bSuccess) return; // Error message already shown
                    this.BeginCapture02();  // Next step
                });
            });
        }
        else {
            this.SetProperty(this.state.scannerDevice, IBSU_PropertyId.ENUM_IBSU_PROPERTY_ROLL_MODE, '0', (bSuccess) => {
                if (!bSuccess) return; // Error message already shown
                this.BeginCapture02();  // Next step
            });
        }

    }

    BeginCapture02() {


        this.setState({
            beeperType: IBSU_BeeperType.ENUM_IBSU_BEEPER_TYPE_NONE
        }, () => {
            this.IBSU_GetOperableBeeper(this.state.scannerDevice, (bSuccess, availableBeeperType) => {
                if (bSuccess) {

                    this.setState({
                        beeperType: availableBeeperType
                    }, () => {
                        this.BeginCapture03();
                    })


                }

            });

        })


    }

    BeginCapture03() {

        var imgRes = IBSU_ImageResolution.ENUM_IBSU_IMAGE_RESOLUTION_500;
        this.IBSU_IsCaptureAvailable(this.state.scannerDevice, this.state.captureInfo.ImageType, imgRes, (bAvailable) => {
            if (!bAvailable) {
                var message = "The capture mode " + this.state.captureInfo.ImageTypeText + " is not available";
                // this.SetStatusMessage(message);
                return;
            }
            this.BeginCapture04();
        });
    }


    BeginCapture04() {

        // Start capture
        var captureOptions = 0;
        if (document.getElementById("cbAutoContrast").checked)
            captureOptions |= IBSU_OPTION_AUTO_CONTRAST;
        if (document.getElementById("cbAutoCapture").checked)
            captureOptions |= IBSU_OPTION_AUTO_CAPTURE;
        if (document.getElementById("cbInvalidFinger").checked)
            captureOptions |= IBSU_OPTION_IGNORE_FINGER_COUNT;




        var imgRes = IBSU_ImageResolution.ENUM_IBSU_IMAGE_RESOLUTION_500;
        this.IBSU_BeginCaptureImage(this.state.scannerDevice, this.state.captureInfo.ImageType, imgRes, captureOptions, (bStarted, errorMessage) => {
            if (bStarted) {
                var instructions = this.state.captureInfo.PreCaptureMessage;
                if (!document.getElementById("cbAutoCapture").checked)
                    instructions += String.Format("\r\nPress button 'Take Result Image' when image is good!");
                document.getElementById("instructionsID").innerHTML = instructions;
                this.setState({
                    captureInProgress: true
                })
                // this.state.captureInProgress = true;
            } else {
                this.SetStatusMessage(errorMessage);
            }

        });
    }

    // ----------------  End Enable Capture ---------------------


    ShowImageQuadrangle(bShow) {


        var imageDiv = document.getElementById("idFpImage");
        // style="border:1px solid black
        if (bShow) {
            imageDiv.style.border = "10px solid red";
        } else {
            imageDiv.style.border = "none";
        }
    }

    ClearPlatenCheckTimer() {


        if (!this.state.captureInProgress) return;

        if (this.state.clearPlatenWarning) {
            this.setState({
                isBlank: !this.state.isBlank
            })
            // this.state.isBlank = !this.state.isBlank;
            this.ShowFingerQuality([0, 0, 0, 0]);
            this.ShowImageQuadrangle(this.state.isBlank);
        }

    }

    // If device is open it must be closed and reopened
    // for clar platen to take effect
    ResetClearPlaten() {

        this.CloseDevice(this.state.scannerDevice); // Inc case it was open
        this.setState({
            scannerDevice: undefined
        })
        //   this.state.scannerDevice = undefined;
    }


    Stop() {

        this.CloseDevice(this.state.scannerDevice);
        this.setState({
            scannerDevice: undefined
        })
        // this.state.scannerDevice = undefined;
        // Note: this runs before close completes
        this.EnableStartButton(true);
        this.EnableSettings(true);
        this.EnableStopButton(false);
        this.EnableTakeImageButton(false);
        var message = "No Active Capture";
        this.SetStatusMessage("تم الالتقاط بنجاح");
        // document.getElementById("instructionsID").innerHTML = message;
        // this.SetStatusMessage("Capture Ready");


    }



    TakeResultImageManually() {

        var funcName = 'IBSU.TakeResultImageManually';
        IBSU.TakeResultImageManually(this.state.scannerDevice, () => {
            this.WriteFunctionResult(funcName, 0, 'Manual Image Requested');

        }, (errorObj) => {
            this.WriteFunctionResult(funcName, errorObj.code, errorObj.message);
        });
    }


    InitPage() {

        // document.getElementById("sFingerOwner").value = this.props.AgePerson.value < 18 ? "16" : "15";
        if (typeof (IBSU) == 'undefined') {
            if (confirm("قد يكون الجهاز غير متوفر او الخدمة متوقفة أو أنه لم يتم تثبيتها . هل تود تحميل تعريف الإصدار الأحدث من الخدمة؟")) {
                window.open("./WindowsServices/IBScanUltimateWebSDKSetup.exe", "_base");
            }
            return;
        }

        try {

            this.state.okBeepSound = new Audio('./images/OK.mp3');
            this.state.successBeepSound = new Audio('./images/Success.mp3');
        }
        catch (err) {

            document.getElementById("instructionsID").innerHTML =
                'This page requires the browser sound function - ' + err.message +
                ' <br />Sounds will play only if supported by the scanner.'
        }
        this.GetSDKVersion();
        this.GetDeviceCount();
    }


    GetSDKVersion() {

        let funcName = 'IBSU.GetSDKVersion';
        IBSU.GetSDKVersion((sdkVersionInfo) => {

            var message = "SDK Version " + sdkVersionInfo.Product +
                ", DLL File version " + sdkVersionInfo.File +
                ", Web SDK Version " + sdkVersionInfo.WebSDKVersion;
            var message2 = " SDK Version " + sdkVersionInfo.Product +
                "<br /> DLL File version " + sdkVersionInfo.File +
                "<br /> Web SDK Version " + sdkVersionInfo.WebSDKVersion;

            if (!sdkVersionInfo.File) {
                if (confirm("جهاز التقاط البصمة غير معرف هل تود تعريف الجهاز")) {
                    window.open("./WindowsServices/IBScanUltimateSDKDriver.exe", "_base");
                }
            }
            this.WriteFunctionResult(funcName, 0, message);

            document.getElementById("dllVersion").innerHTML = message2;

        }, (errorObj) => {
            this.SetStatusMessage("Unable to get SDK version: " + errorObj.message + '(' + errorObj.code + ')');
            this.WriteFunctionResult(funcName, errorObj.code, errorObj.message);
        });

    }


    GetDeviceCount() {

        let funcName = 'IBSU.GetDeviceCount';
        IBSU.GetDeviceCount((nDevices) => {
            document.getElementById("deviceCountID").innerHTML = nDevices;
            this.setState({
                connectedDeviceCount: nDevices
            })
            // this.state.connectedDeviceCount = nDevices;
            this.ReloadDeviceList();

        }, (errorObj) => {
            this.SetStatusMessage("Unable to get device count: " + errorObj.message + '(' + errorObj.code + ')');
            this.WriteFunctionResult(funcName, errorObj.code, errorObj.message);
        });

    };

    OnchangeHandleFingerPrint(event) {
        this.setState({
            NochangeFromhandling: false
        }, () => {

            var SelectedValue = event.target.value;

            if (SelectedValue == "1") {
                this.props.props.ApplicantHimSelf.setValue(true);

            } else if (SelectedValue == "2") {
                this.props.props.ApplicantHimSelf.setValue(false);
            }

        })


    }

    OnchangeHandle(event) {
        var SelectedValue = event.target.value;
        if (SelectedValue == "1") {
            this.CaptureRightHand();

        } else if (SelectedValue == "2") {
            this.CaptureLeftHand();
        } else if (SelectedValue == "3") {
            this.CaptureThumbsHand();

        }
        document.getElementById("sDevicesFingerPrint").value = "0";
    }


    render() {

        return (
            <Form>
                {this.state.IsLoading ? <div className="parentDisable" style={{ width: "100%" }}>
                    <div className='overlay-box'>

                        <LoadingSpinner />
                    </div>

                </div> : ''}

                <body style={{ direction: 'ltr', backgroundColor: "#eeeded" }}>

                    <div className="container first-div" >
                        <div className="row">
                            <div className="col-xs-12 col-sm-12 col-md-12 col-xl-12" style={{ display: 'grid', bottom: '90px' }}>

                                <label id="lblIFingerIndex">صاحب البصمة</label>
                                <div className="col-xs-6 col-sm-6 col-md-6 col-xl-6" style={{ left: '25%' }}>
                                    <select id="sPersonFingerPrint" className="form-control SelectCaptureHand" onChange={(event) => this.OnchangeHandleFingerPrint(event)} >
                                        <option value="1">بصمة صاحب الجواز الحية</option>
                                        <option value="2">بصمة ولي الأمر</option>
                                    </select>
                                </div>

                                {/* <input style={{ textAlign: 'center', borderRadius: "12px", fontWeight: 'bold', width: '20%', justifySelf: 'center' }} type={"text"} value={this.props.props.AgePerson.value ? "بصمة صاحب الجواز الحية"  :"بصمة ولي الأمر" } ></input> */}

                            </div>
                            <div className="col-xs-12 col-sm-12 col-md-12 content">
                                <div className="" style={{ position: "relative", bottom: "40px" }}>
                                    <div>

                                        <div className="row">

                                            <div className="col-xs-12 col-sm-12 col-md-12 col-xl-12" style={{ bottom: "10px" }}>
                                                <div className="row">
                                                    <div className="col-xs-6 col-sm-6 col-md-6 col-xl-6" style={{ left: '25%' }}>
                                                        <select id="sDevicesFingerPrint" className="form-control SelectCaptureHand" onChange={(event) => this.OnchangeHandle(event)} >
                                                            <option value="0" selected>الرجاء اختيار اليد للتبصيم</option>
                                                            <option value="1">الـــيد اليمـــنى</option>
                                                            <option value="2">الـــيد اليســـرى</option>
                                                            <option value="3" > الابهــــام</option>
                                                            {/* <option value="3" >عيــون مفقـوده</option> */}
                                                        </select>
                                                    </div>
                                                    <div className="col-xs-6 col-sm-6 col-md-6 col-xl-6" style={{
                                                        fontSize: "21px",
                                                        fontWeight: "bold",
                                                        color: "seagreen",
                                                        position: "relative",
                                                        bottom: "28px"
                                                    }}>
                                                        <span id="statusInfo" style={{ position: 'absolute' }}></span>
                                                        <br />
                                                        <br />
                                                        <span id="WichHandSelector" style={{ position: 'absolute' }} ></span>
                                                    </div>

                                                </div>

                                            </div>
                                            <div className="col-xs-12 col-sm-12 col-md-12 col-xl-12" style={{ zIndex: 1 }} >
                                                <input type="button" disabled={this.state.BlocedButtonCLose} onClick={() => this.closePage()} style={{ color: "white", backgroundColor: "#1f3646", fontSize: "18px", borderRadius: "12px", width: "80px" }} value="أغـلاق" />
                                                <input type="button" disabled={this.state.BlockedbUttonVerfiy} onClick={() => this.ButtonVerfiyDeliverCapture()} style={{ display: this.props.props.EnableButtonVerify.value == 'false' ? "none" : "initial", color: "white", backgroundColor: "#1f3646", fontSize: "18px", borderRadius: "12px", width: "80px" }} value="تحـقق" />
                                                <input type="button" disabled={this.state.BlockedButtonUpdate} onClick={() => this.UpdateFingerPrint()} style={{ display: this.props.props.EnableButtonUpdate.value == 'false' ? "none" : "initial", color: "white", backgroundColor: "#1f3646", fontSize: "18px", borderRadius: "12px", width: "80px" }} value="تعـديل" />
                                                <input id="BtnSaveFinger" disabled={this.state.BlockedButtonsave} type="button" onClick={() => this.SaveFingerPrint()} style={{ display: this.props.props.EnableButtonSave.value == 'false' ? "none" : "initial", color: "white", backgroundColor: "#1f3646", fontSize: "18px", borderRadius: "12px", width: "80px" }} value="حفـظ" />
                                            </div>

                                        </div>

                                    </div>
                                </div>
                            </div>

                        </div>
                    </div>
                    <div className="container second-div">
                        <div className="row all-sides" style={{ position: "relative", bottom: "90px" }}>
                            <div className="col-md-4 left-side">
                                <div className="row" style={{ position: 'relative', left: '100px', bottom: "35%" }}>
                                    <div>
                                        <div id="divFeatures" style={{ display: 'none', width: '320px', padding: '2px', backgroundColor: '#04b0f0', borderRadius: '8px', textAlign: 'left' }} >
                                            <div style={{ marginLeft: '20px' }}>
                                                <br />
                                                <input type="checkbox" id="cbAutoContrast" checked></input>&nbsp;&nbsp;Automatic Contrast
                                                <br />
                                                <input type="checkbox" id="cbAutoCapture" checked></input>&nbsp;&nbsp;Automatic Capture
                                                <br />
                                                <input type="checkbox" id="cbEnableEncrypt"></input>&nbsp;&nbsp;Enable Encryption
                                                <br />
                                                <input type="checkbox" id="cbInvalidFinger" checked></input>&nbsp;&nbsp;Invalid Finger Count
                                                <br />
                                                <input type="checkbox" id="cbClearPlaten" onclick="ResetClearPlaten();"></input>&nbsp;&nbsp;Enable Clear Platen
                                                <br />
                                                <input type="checkbox" id="cbDrawSegmentImage" checked></input>&nbsp;&nbsp;Image Segments
                                                <br />
                                                <input type="checkbox" id="cbNFIQ" checked></input>&nbsp;&nbsp;NFIQ 1.0 Score
                                                <br />
                                                Customer key:
                                                <input type="text" id="txtCustomerKey" disabled></input>
                                                <br />
                                                <input type="checkbox" id="cbEnableSpoof"></input>&nbsp;&nbsp;Enable Spoof Algorithm&nbsp;&nbsp; Sensitivity&nbsp;<input type="text" id="txtSpoofSensi" style={{ width: '25px' }} value="5" />
                                                <br />
                                                <input type="checkbox" id="cbDetectSmear" checked></input>&nbsp;&nbsp;Smear Detection
                                                &nbsp;&nbsp;
                                                <select id="cboSmearLevel">
                                                    <option>LOW</option>
                                                    <option selected>MEDIUM</option>
                                                    <option>HIGH</option>
                                                </select>
                                                <br />&nbsp;
                                            </div>
                                        </div>
                                        <br />
                                        <h3 style={{ position: "relative", top: "30px", margin: 'revert' }}>الماسح الضوئي</h3>
                                        <br />
                                        <div>
                                            <span id="spanScannerImage"></span>

                                            <svg id="idSvgQuality" y="115" width="115" height="124" style={{ position: 'relative', left: '0px', top: '0px' }}>
                                                <rect id="idQuality0" x="12" y="26" rx="20" ry="20" width="20" height="80"
                                                    style={{ fill: 'red', stroke: 'black', strokeWidth: '1', opacity: '0.0' }} />

                                                <rect id="idQuality1" x="34" y="26" rx="20" ry="20" width="20" height="80"
                                                    style={{ fill: 'red', stroke: 'black', strokeWidth: '1', opacity: '0.0' }} />

                                                <rect id="idQuality2" x="56" y="26" rx="20" ry="20" width="20" height="80"
                                                    style={{ fill: 'red', stroke: 'black', strokeWidth: '1', opacity: '0.0' }}
                                                />
                                                <rect id="idQuality3" x="78" y="26" rx="20" ry="20" width="20" height="80"
                                                    style={{ fill: 'red', stroke: 'black', strokeWidth: '1', opacity: '0.0' }} />
                                            </svg>
                                        </div>
                                        <div id="idQualityItems" style={{ display: 'none', width: '320px', height: '124px', backgroundColor: '#04b0f0', borderRadius: '8px' }}>


                                            <div id="ScanControlForm" style={{ width: '175px', padding: '2px', borderRadius: '8px', float: 'right' }}>
                                                <br />
                                                <form style={{ display: 'none' }}>
                                                    {/* onchange="SetCaptureOptions();" */}
                                                    <select id="scanners"></select>
                                                    &nbsp;
                                                    {/* onchange="SetStartStopButtons();" */}
                                                    <select id="captureType" ></select>
                                                </form>
                                                <br />
                                                {/* onclick="Start();" */}
                                                <input style={{ width: '100%', padding: '10px', marginLeft: '-19px', }} type="button" id="btStart" value="التقاط/اعادة الالتقاط" disabled ></input>
                                                {/* onclick="Stop();"  */}
                                                <input style={{ display: 'none' }} type="button" id="btStop" value="Stop" disabled ></input>
                                                {/* onclick="TakeResultImageManually();" */}
                                                <input style={{ display: 'none', width: '100%', padding: '10px', marginLeft: '-16px' }} type="button" id="btTakeImage" value="Take Image" disabled ></input>
                                            </div>
                                        </div>
                                    </div>
                                    <div className="status" style={{ marginLeft: '30px' }}>
                                        <label id="lblSensorStatus"></label>
                                        <br /><br />
                                        <label id="lblVerifyStatus"></label>
                                    </div>
                                </div>

                                <div className="row">
                                    <div id="IV01">
                                        <i className="fa fa-times" style={{ display: 'none' }} ></i>

                                        <p></p>
                                        <div style={{ position: 'absolute', bottom: "26%" }} >
                                            <img id="idFpImage" width="320" height="300" style={{ borderRadius: "15px", border: "1px solid", padding: "0px" }} />
                                            <svg id="svgImageOverlays" y="0" width="320" height="300" style={{ position: 'absolute', zIndex: 5, left: '0px', top: '0px', borderRadius: "15px", border: "1px solid", padding: "0px" }} >
                                                <line id="idRollingLine" x1="150" y1="10" x2="150" y2="240" style={{ stroke: 'red', strokeWidth: '2', opacity: '0.0' }} />
                                                <polygon id="idQuadrangle0" points="0,0 5,5 45,10 0,0" style={{ fill: 'none', stroke: 'green', strokeWidth: '2', opacity: '0.0' }} />
                                                <polygon id="idQuadrangle1" points="0,0 5,5 45,10 0,0" style={{ fill: 'none', stroke: 'green', strokeWidth: '2', opacity: '0.0' }} />
                                                <polygon id="idQuadrangle2" points="0,0 5,5 45,10 0,0" style={{ fill: 'none', stroke: 'green', strokeWidth: '2', opacity: '0.0' }} />
                                                <polygon id="idQuadrangle3" points="0,0 5,5 45,10 0,0" style={{ fill: 'none', stroke: 'green', strokeWidth: '2', opacity: '0.0' }} />
                                            </svg>
                                        </div>

                                        <br />
                                        <div style={{ display: 'none' }}>
                                            <span id="idNFIQResults" style={{ position: 'relative', color: 'rgb(0 128 0)', margin: '5px', fontSize: '25px', left: '50px' }}></span><br /><br />
                                            <div id="instructionsID" style={{ position: 'relative', left: '40px', color: 'rgb(0 128 0)', fontSize: '18px' }}></div><br />
                                            <span id="statusSpoof" style={{ position: 'relative', left: '5px', color: '#04b0f0', display: 'none' }}></span>

                                        </div>

                                    </div>
                                    <div id="FPScanner" className="FingerPrintWiddd">

                                        <FingerPrintScaning />

                                    </div>
                                    <div className="status" style={{ marginTop: '180px', marginLeft: '30px' }}>
                                        <label id="lblSensorStatus"></label>
                                        <br /><br />
                                        <label id="lblVerifyStatus"></label>
                                    </div>


                                </div>

                            </div>

                            <div className="col-md-8 hands-container">

                                <div>
                                    <br />
                                    <div>

                                        <div>

                                            <div className="handsMain">

                                                <div className="leftHand">
                                                    {/*  */}
                                                    {/* onclick="CaptureThumbsHand();" */}
                                                    {/* <input type="button" id="btnCaptureTumb" style={{ backgroundColor: '#1f3646', color: 'white' }} onClick={() => this.CaptureThumbsHand()} name="btnCapture" className="btn  btn-sm" value="إلتقاط بصمات الإبهام" ></input> */}
                                                    <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0px" y="0px"
                                                        width="206.347px" height="231.999px" viewBox="0 0 206.347 231.999" style={{ fill: "#ffcc99" }} enable-background="new 0 0 206.347 231.999"
                                                    >
                                                        <path d="M94.012,231.999c-2.911-0.371-5.824-0.728-8.732-1.116c-7.994-1.064-15.926-2.385-23.511-5.29
						c-6.8-2.604-11.581-7.273-15.256-13.54c-5.378-9.171-8.267-19.101-10.46-29.381c-3.025-14.18-5.557-28.539-9.793-42.364
						c-3.343-10.911-8.62-21.285-13.618-31.617C7.399,97.852,3.035,86.764,0.478,75.006c-0.5-2.297-0.595-4.781-0.345-7.122
						c0.52-4.866,5.444-7.338,9.618-4.764c1.902,1.173,3.876,2.866,4.837,4.809c2.822,5.7,5.477,11.528,7.611,17.515
						c5.072,14.235,12.851,26.919,21.617,39.072c1.058,1.467,2.46,2.763,3.922,3.841c2.25,1.659,3.987,1.05,4.153-1.694
						c0.244-4.033,0.28-8.153-0.26-12.145c-2.312-17.064-4.762-34.112-7.38-51.132c-1.259-8.181-2.986-16.29-4.533-24.425
						c-1.087-5.714-1.34-11.41,0.194-17.084c0.249-0.92,0.578-1.831,0.986-2.692c2.468-5.209,8.279-6.638,12.496-2.736
						c1.775,1.643,3.258,4.039,3.927,6.365c2.74,9.526,3.986,19.322,4.975,29.188c0.81,8.075,2.519,16.058,3.738,24.096
						c1.171,7.718,2.131,15.469,3.371,23.175c0.566,3.521,1.414,7.024,2.497,10.419c0.325,1.02,1.894,2.3,2.857,2.271
						c0.925-0.028,2.407-1.487,2.596-2.511c0.824-4.449,1.609-8.958,1.758-13.467c0.193-5.822-0.334-11.665-0.369-17.5
						c-0.04-6.55,0.324-13.107,0.148-19.651c-0.261-9.728-0.69-19.458-1.338-29.168C77.071,22.417,76.007,15.176,77.895,8
						c1.03-3.913,3.118-6.976,7.517-7.782c3.705-0.679,5.875,0.168,7.842,3.411c2.503,4.125,3.444,8.77,3.909,13.455
						c1.377,13.898,2.809,27.798,3.755,41.729c0.617,9.083,0.119,18.24,0.708,27.326c0.363,5.599,1.678,11.16,2.882,16.668
						c0.432,1.978,1.206,4.576,3.922,4.486c2.741-0.091,3.146-2.748,3.56-4.758c1.171-5.693,2.059-11.443,3.088-17.165
						c1.508-8.392,3.029-16.782,4.566-25.169c1.653-9.021,1.34-18.137,1.492-27.242c0.058-3.474,0.708-6.977,1.44-10.391
						c0.665-3.098,2.689-5.41,5.475-6.959c3.83-2.129,8.236-1.181,10.066,2.764c1.549,3.34,3.04,7.092,3.072,10.674
						c0.082,9.33-0.298,18.699-1.147,27.992c-1.175,12.862-2.918,25.673-4.475,38.499c-1.336,11.004-1.385,22.008,0.095,32.986
						c0.423,3.136,1.164,6.298,2.265,9.26c2.425,6.52,6.911,7.633,11.918,2.757c2.76-2.688,5.085-5.955,7.063-9.284
						c3.503-5.897,6.193-12.306,9.983-17.994c2.835-4.254,6.486-8.173,10.449-11.417c6.48-5.304,14.231-6.938,22.546-5.559
						c0.079,0.013,0.16,0.016,0.237,0.034c6.526,1.58,7.959,5.335,4.109,10.858c-0.776,1.113-1.57,2.254-2.551,3.175
						c-8.747,8.214-14.314,18.55-19.488,29.138c-5.644,11.55-10.754,23.387-16.919,34.648c-7.681,14.029-16.492,27.424-26.986,39.563
						c-9.502,10.991-21.726,16.771-36.229,17.738c-0.771,0.051-1.525,0.364-2.287,0.555C97.852,231.999,95.932,231.999,94.012,231.999z" />



                                                    </svg>
                                                    <ul className="lefhandlist">
                                                        {/* onchange="ChnageCheckRadio(this)" */}
                                                        <li className="pinkyFingerLeft" style={{ background: 'rgb(217 217 217)' }} > <input type="checkbox" onChange={() => this.setState({
                                                            LittleLeft: !this.state.LittleLeft
                                                        })} checked={this.state.LittleLeft} title="الخنصر - اليد اليسرى" value="0"></input></li>
                                                        {/* onchange="ChnageCheckRadio(this)" */}
                                                        <li className="ringFingerLeft" style={{ background: 'rgb(217 217 217)' }}><input type="checkbox" onChange={() => this.setState({
                                                            RingLeft: !this.state.RingLeft
                                                        })} checked={this.state.RingLeft} title="البنصر - اليد اليسرى" value="1"></input></li>
                                                        {/* onchange="ChnageCheckRadio(this)"  */}
                                                        <li className="middleFingerLeft" style={{ background: 'rgb(217 217 217)' }}><input type="checkbox" onChange={() => this.setState({
                                                            MiddleLeft: !this.state.MiddleLeft
                                                        })} checked={this.state.MiddleLeft} title="الوسطى - اليد اليسرى" value="2"></input></li>
                                                        {/* onchange="ChnageCheckRadio(this)" */}
                                                        <li className="indexFingerLeft" style={{ background: 'rgb(217 217 217)' }}><input type="checkbox" onChange={() => this.setState({
                                                            IndexLeft: !this.state.IndexLeft
                                                        })} checked={this.state.IndexLeft} title="السبابة - اليد اليسرى" value="3"></input></li>
                                                        {/* onchange="ChnageCheckRadio(this)" */}
                                                        <li className="thumbFingerLeft" style={{ background: 'rgb(217 217 217)' }}><input type="checkbox" onChange={() => this.setState({
                                                            ThumbLeft: !this.state.ThumbLeft
                                                        })} checked={this.state.ThumbLeft} title="الإبهام - اليد اليسرى" value="4"></input></li>
                                                    </ul>
                                                    {/* onclick="CaptureLeftHand();" */}
                                                    {/* */}
                                                    {/* <input type="button" id="btnCaptureLeftHand" style={{ backgroundColor: '#1f3646', color: 'white' }} onClick={() => this.CaptureLeftHand()} className="btn  btn-sm" value="إلتقاط بصمه اليد اليسرى" ></input> */}

                                                </div>


                                                <div className="rightHand">
                                                    <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0px" y="0px"
                                                        width="206.347px" height="231.999px" viewBox="0 0 206.347 231.999" style={{ fill: "#ffcc99" }} enable-background="new 0 0 206.347 231.999"
                                                    >
                                                        <path d="M106.573,231.996c-0.762-0.191-1.516-0.504-2.287-0.555c-14.503-0.967-26.727-6.747-36.229-17.738
						c-10.494-12.139-19.305-25.534-26.986-39.563c-6.165-11.261-11.275-23.098-16.919-34.648c-5.174-10.588-10.741-20.924-19.488-29.138
						c-0.981-0.921-1.775-2.062-2.551-3.175c-3.85-5.523-2.417-9.278,4.109-10.858c0.077-0.018,0.158-0.021,0.237-0.034
						c8.315-1.379,16.066,0.255,22.546,5.559c3.963,3.244,7.614,7.163,10.449,11.417c3.79,5.688,6.48,12.097,9.983,17.994
						c1.978,3.329,4.303,6.596,7.063,9.284c5.007,4.876,9.493,3.763,11.918-2.757c1.101-2.962,1.842-6.124,2.265-9.26
						c1.48-10.978,1.431-21.982,0.095-32.986c-1.557-12.826-3.3-25.637-4.475-38.499c-0.849-9.293-1.229-18.662-1.147-27.992
						c0.032-3.582,1.523-7.334,3.072-10.674c1.83-3.945,6.236-4.893,10.066-2.764c2.786,1.549,4.81,3.861,5.475,6.959
						c0.732,3.414,1.382,6.917,1.44,10.391c0.152,9.105-0.161,18.221,1.492,27.242c1.537,8.387,3.058,16.777,4.566,25.169
						c1.029,5.722,1.917,11.472,3.088,17.165c0.414,2.01,0.819,4.667,3.56,4.758c2.716,0.09,3.49-2.508,3.922-4.486
						c1.204-5.508,2.519-11.069,2.882-16.668c0.589-9.086,0.091-18.243,0.708-27.326c0.946-13.931,2.378-27.831,3.755-41.729
						c0.465-4.685,1.406-9.33,3.909-13.455c1.967-3.243,4.137-4.09,7.842-3.411c4.399,0.806,6.487,3.869,7.517,7.782
						c1.888,7.176,0.824,14.417,0.341,21.666c-0.648,9.71-1.077,19.44-1.338,29.168c-0.176,6.544,0.188,13.101,0.148,19.651
						c-0.035,5.835-0.562,11.678-0.369,17.5c0.149,4.509,0.934,9.018,1.758,13.467c0.189,1.024,1.671,2.483,2.596,2.511
						c0.963,0.029,2.532-1.251,2.857-2.271c1.083-3.395,1.931-6.898,2.497-10.419c1.24-7.706,2.2-15.457,3.371-23.175
						c1.219-8.038,2.928-16.021,3.738-24.096c0.989-9.866,2.235-19.662,4.975-29.188c0.669-2.326,2.152-4.722,3.927-6.365
						c4.217-3.902,10.028-2.473,12.496,2.736c0.408,0.861,0.737,1.772,0.986,2.692c1.534,5.674,1.281,11.37,0.194,17.084
						c-1.547,8.135-3.274,16.244-4.533,24.425c-2.618,17.02-5.068,34.068-7.38,51.132c-0.54,3.992-0.504,8.112-0.26,12.145
						c0.166,2.744,1.903,3.353,4.153,1.694c1.462-1.078,2.864-2.374,3.922-3.841c8.766-12.153,16.545-24.837,21.617-39.072
						c2.134-5.987,4.789-11.815,7.611-17.515c0.961-1.943,2.935-3.636,4.837-4.809c4.174-2.574,9.098-0.102,9.618,4.764
						c0.25,2.341,0.155,4.825-0.345,7.122c-2.557,11.758-6.921,22.846-12.164,33.685c-4.998,10.332-10.275,20.706-13.618,31.617
						c-4.236,13.825-6.768,28.184-9.793,42.364c-2.193,10.28-5.082,20.21-10.46,29.381c-3.675,6.267-8.456,10.936-15.256,13.54
						c-7.585,2.905-15.517,4.226-23.511,5.29c-2.908,0.388-5.821,0.745-8.732,1.116C110.413,231.999,108.493,231.999,106.573,231.996z" />


                                                    </svg>
                                                    <ul className="righthandlist">
                                                        {/* onchange="ChnageCheckRadio(this)" */}
                                                        <li className="thumbFingerRight" style={{ background: 'rgb(217 217 217)' }}><input type="checkbox" onChange={() => this.setState({
                                                            ThumbRight: !this.state.ThumbRight
                                                        })} checked={this.state.ThumbRight} title="الإبهام - اليد اليمنى" value="5"></input></li>
                                                        {/* onchange="ChnageCheckRadio(this)" */}
                                                        <li className="indexFingerRight" style={{ background: 'rgb(217 217 217)' }}><input type="checkbox" onChange={() => this.setState({
                                                            IndexRight: !this.state.IndexRight
                                                        })} checked={this.state.IndexRight} title="السبابة - اليد اليمنى" value="6"></input></li>
                                                        {/* onchange="ChnageCheckRadio(this)" */}
                                                        <li className="middleFingerRight" style={{ background: 'rgb(217 217 217)' }}><input type="checkbox" onChange={() => this.setState({
                                                            MiddleRight: !this.state.MiddleRight
                                                        })} checked={this.state.MiddleRight} title="الوسطى - اليد اليمنى" value="7"></input></li>
                                                        {/* onchange="ChnageCheckRadio(this)" */}
                                                        <li className="ringFingerRight" style={{ background: 'rgb(217 217 217)' }}><input type="checkbox" onChange={() => this.setState({
                                                            RingRight: !this.state.RingRight
                                                        })} checked={this.state.RingRight} title="البنصر - اليد اليمنى" value="8"></input></li>
                                                        {/* onchange="ChnageCheckRadio(this)" */}
                                                        <li className="pinkyFingerRight" style={{ background: 'rgb(217 217 217)' }}><input type="checkbox" onChange={() => this.setState({
                                                            LittleRight: !this.state.LittleRight
                                                        })} checked={this.state.LittleRight} title="الخنصر - اليد اليمنى" value="9"></input></li>
                                                    </ul>

                                                    {/* onclick="CaptureRightHand();" */}
                                                    {/*   */}
                                                    {/* <input type="button" className="btn  btn-sm" style={{ backgroundColor: '#1f3646', color: 'white' }} onClick={() => this.CaptureRightHand()} id="btnCaptureRightHand" name="btnCapture" value="إلتقاط بصمه اليد اليمنى" ></input> */}

                                                </div>

                                            </div>

                                        </div>

                                    </div>
                                </div>

                            </div>

                        </div>

                    </div>

                    <div className="templatemo-flex-row">
                        <div style={{ display: 'none' }} className="templatemo-sidebar">
                            <header className="templatemo-site-header">

                                <div className="square"></div>
                                <h1>IBSU Web</h1>

                                <div style={{ color: '#04b0f0' }}>

                                    <span id="dllVersion">?.?</span><br /><br />
                                    <span id="deviceCountID">0</span><br />
                                    <span id="spanDeviceDescription"></span><br />
                                    <span id="spanSpoofEnabled"></span><br />
                                    <span id="spanEncryptEnabled"></span><br />
                                    <span id="spanDeviceLocked"></span><br />
                                </div>
                            </header>

                            <div className="mobile-menu-icon">
                                <i className="fa fa-bars"></i>
                            </div>
                            <nav className="templatemo-left-nav">
                                <ul>
                                    <li><a href="#" className="active"><i className="fa fa-home fa-fw"></i>Documentation</a></li>
                                    <li><a href="#"><i className="fa fa-bar-chart fa-fw"></i>Tools</a></li>
                                    <li><a href="http://integratedbiometrics.force.com" target="_blank"><i className="fa fa-database fa-fw"></i>Support Portal</a></li>
                                    <li><a href="http://www.integratedbiometrics.com" target="_blank"><i className="fa fa-database fa-fw"></i>integratedbiometrics.com</a></li>
                                    <li><input type="button" value="GetProperty" onclick="funcSetEncrypt();"></input> </li>
                                </ul>
                            </nav>
                        </div>

                        <div className="templatemo-content col-1" style={{ display: 'none' }}>
                            <div style={{ display: 'none' }} className="templatemo-top-nav-container">
                                <div className="row">
                                    <div className="IB_Logo_Circle-container">
                                        <a href="https://integratedbiometrics.com/" target="_blank">
                                            {/* <img src="~/AFIS_FingerPrint/wwwrootAfis/images/IBLogos/IB_Logo_Blk.png" alt="Profile Photo" className="img-responsive" width="180"></img> */}
                                        </a>
                                    </div>

                                    <div>
                                        <span id="statusInfo" style={{ display: 'block', width: '500px', wordWrap: 'break-word', color: 'white', fontSize: '24px', fontWeight: 'bold' }} >gvfjgvg</span>
                                        <span id="WichHandSelector" style={{ display: 'block', width: '500px', wordWrap: 'break-word', color: 'white', fontSize: '24px', fontWeight: 'bold' }}></span>
                                    </div>
                                </div>
                            </div>
                            <div className="templatemo-content-container">
                                <div className="templatemo-flex-row">

                                    <div className="templatemo-content-widget white-bg col-1" style={{ float: 'left', display: 'none' }}>
                                        <i className="fa fa-times"></i>
                                        <h2 className="text-uppercase">Messaging Center</h2>
                                        <h3 className="text-uppercase">API Feedback and Logging</h3>
                                        &nbsp;&nbsp;<input type="checkbox" id="idAppendFunctionResult" checked />&nbsp;&nbsp;
                                        <div className="titleHeader">
                                            Result Value
                                        </div>
                                        <textarea id="idFunctionResult" style={{ width: "98%", height: '150px', margin: '3px' }}></textarea>
                                        <div className="titleHeader">
                                            Additional Information
                                        </div>
                                        <textarea id="idAdditionalInformation" style={{ width: "98%", height: '100px', margin: '3px' }}></textarea>
                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>

                </body>

            </Form>

        )
    }
}
